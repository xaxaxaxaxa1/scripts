local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local HttpService = game:GetService("HttpService")

local PARENT = (gethui and gethui()) or game:GetService('CoreGui')

local Vglobais = {
    ps = game:service("Players"),
    p = game:service("Players").LocalPlayer
}

local OrionLib = {
    Elements = {},
    ThemeObjects = {},
    Connections = {},
    Flags = {},
    Themes = {
        Default = {
            Main = Color3.fromRGB(25, 25, 25),
            Second = Color3.fromRGB(32, 32, 32),
            Stroke = Color3.fromRGB(60, 60, 60),
            Divider = Color3.fromRGB(60, 60, 60),
            Text = Color3.fromRGB(240, 240, 240),
            TextDark = Color3.fromRGB(150, 150, 150)
        },

        MidnightBlue = {
            Main = Color3.fromRGB(15, 15, 38),
            Second = Color3.fromRGB(25, 25, 60),
            Stroke = Color3.fromRGB(70, 70, 120),
            Divider = Color3.fromRGB(50, 50, 90),
            Text = Color3.fromRGB(220, 220, 255),
            TextDark = Color3.fromRGB(130, 130, 200)
        },

        ElegantGold = {
            Main = Color3.fromRGB(40, 30, 10),
            Second = Color3.fromRGB(55, 40, 15),
            Stroke = Color3.fromRGB(200, 160, 40),
            Divider = Color3.fromRGB(150, 120, 30),
            Text = Color3.fromRGB(240, 210, 150),
            TextDark = Color3.fromRGB(180, 150, 100)
        },

        EmeraldGreen = {
            Main = Color3.fromRGB(10, 30, 20),
            Second = Color3.fromRGB(20, 50, 35),
            Stroke = Color3.fromRGB(50, 120, 90),
            Divider = Color3.fromRGB(30, 80, 60),
            Text = Color3.fromRGB(200, 255, 220),
            TextDark = Color3.fromRGB(120, 200, 160)
        },

        RubyRed = {
            Main = Color3.fromRGB(38, 10, 10),
            Second = Color3.fromRGB(60, 20, 20),
            Stroke = Color3.fromRGB(150, 50, 50),
            Divider = Color3.fromRGB(100, 30, 30),
            Text = Color3.fromRGB(255, 200, 200),
            TextDark = Color3.fromRGB(200, 150, 150)
        },

        Platinum = {
            Main = Color3.fromRGB(220, 220, 220),
            Second = Color3.fromRGB(240, 240, 240),
            Stroke = Color3.fromRGB(180, 180, 180),
            Divider = Color3.fromRGB(200, 200, 200),
            Text = Color3.fromRGB(50, 50, 50),
            TextDark = Color3.fromRGB(100, 100, 100)
        },

        SapphireBlue = {
            Main = Color3.fromRGB(10, 20, 50),
            Second = Color3.fromRGB(20, 40, 80),
            Stroke = Color3.fromRGB(50, 100, 180),
            Divider = Color3.fromRGB(30, 60, 120),
            Text = Color3.fromRGB(200, 220, 255),
            TextDark = Color3.fromRGB(120, 160, 200)
        },

        RoseQuartz = {
            Main = Color3.fromRGB(50, 20, 30),
            Second = Color3.fromRGB(70, 30, 50),
            Stroke = Color3.fromRGB(150, 80, 100),
            Divider = Color3.fromRGB(100, 50, 70),
            Text = Color3.fromRGB(255, 200, 220),
            TextDark = Color3.fromRGB(200, 150, 180)
        },

        Obsidian = {
            Main = Color3.fromRGB(20, 20, 20),
            Second = Color3.fromRGB(40, 40, 40),
            Stroke = Color3.fromRGB(100, 100, 100),
            Divider = Color3.fromRGB(60, 60, 60),
            Text = Color3.fromRGB(220, 220, 220),
            TextDark = Color3.fromRGB(150, 150, 150)
        },

        Amethyst = {
            Main = Color3.fromRGB(30, 10, 40),
            Second = Color3.fromRGB(50, 20, 70),
            Stroke = Color3.fromRGB(120, 60, 150),
            Divider = Color3.fromRGB(80, 30, 100),
            Text = Color3.fromRGB(240, 220, 255),
            TextDark = Color3.fromRGB(160, 130, 200)
        },

        SunsetOrange = {
            Main = Color3.fromRGB(50, 20, 10),
            Second = Color3.fromRGB(70, 30, 20),
            Stroke = Color3.fromRGB(180, 100, 70),
            Divider = Color3.fromRGB(120, 60, 40),
            Text = Color3.fromRGB(255, 220, 200),
            TextDark = Color3.fromRGB(200, 150, 120)
        }
    },
    SelectedTheme = "Default",
	UnlockMouseMode = "TB",
    Folder = nil,
    SaveCfg = false
}

OrionLib.Themes.Default.Accent = Color3.fromRGB(9, 149, 98)
OrionLib.Themes.MidnightBlue.Accent = Color3.fromRGB(70, 120, 200)
OrionLib.Themes.ElegantGold.Accent = Color3.fromRGB(200, 160, 40)
OrionLib.Themes.EmeraldGreen.Accent = Color3.fromRGB(50, 200, 100)
OrionLib.Themes.RubyRed.Accent = Color3.fromRGB(200, 80, 80)
OrionLib.Themes.Platinum.Accent = Color3.fromRGB(150, 150, 150)
OrionLib.Themes.SapphireBlue.Accent = Color3.fromRGB(80, 150, 220)
OrionLib.Themes.RoseQuartz.Accent = Color3.fromRGB(200, 120, 150)
OrionLib.Themes.Obsidian.Accent = Color3.fromRGB(120, 120, 120)
OrionLib.Themes.Amethyst.Accent = Color3.fromRGB(150, 100, 200)
OrionLib.Themes.SunsetOrange.Accent = Color3.fromRGB(220, 140, 80)

local Icons = {}

local Success, Response = pcall(function()
	Icons = HttpService:JSONDecode(game:HttpGetAsync("https://raw.githubusercontent.com/firemax-x/Script/refs/heads/main/Icons")).icons
end)

if not Success then
	warn("\nOrion Library - Failed to load Feather Icons. Error code: " .. Response .. "\n")
end

local function GetIcon(IconName)
	if Icons[IconName] ~= nil then
		return Icons[IconName]
	else
		return nil
	end
end   

local Orion = Instance.new("ScreenGui")
Orion.Name = "Orion"
Orion.Parent = PARENT

for _, Interface in ipairs(PARENT:GetChildren()) do
	if Interface.Name == Orion.Name and Interface ~= Orion then
		Interface:Destroy()
	end
end

function OrionLib:IsRunning()
	return Orion.Parent == PARENT
end

local function AddConnection(Signal, Function)
	if (not OrionLib:IsRunning()) then
		return
	end
	local SignalConnect = Signal:Connect(Function)
	table.insert(OrionLib.Connections, SignalConnect)
	return SignalConnect
end

task.spawn(function()
	while (OrionLib:IsRunning()) do
		wait()
	end

	for _, Connection in next, OrionLib.Connections do
		Connection:Disconnect()
	end
end)

local function MakeDraggable(DragPoint, Main)
	pcall(function()
		local Dragging, DragInput, MousePos, FramePos = false
		AddConnection(DragPoint.InputBegan, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				Dragging = true
				MousePos = Input.Position
				FramePos = Main.Position

				Input.Changed:Connect(function()
					if Input.UserInputState == Enum.UserInputState.End then
						Dragging = false
					end
				end)
			end
		end)
		AddConnection(DragPoint.InputChanged, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseMovement then
				DragInput = Input
			end
		end)
		AddConnection(UserInputService.InputChanged, function(Input)
			if Input == DragInput and Dragging then
				local Delta = Input.Position - MousePos
				TweenService:Create(Main, TweenInfo.new(0.45, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Position  = UDim2.new(FramePos.X.Scale,FramePos.X.Offset + Delta.X, FramePos.Y.Scale, FramePos.Y.Offset + Delta.Y)}):Play()
			end
		end)
	end)
end    

local function Create(Name, Properties, Children)
	local Object = Instance.new(Name)
	for i, v in next, Properties or {} do
		Object[i] = v
	end
	for i, v in next, Children or {} do
		v.Parent = Object
	end
	return Object
end

local function CreateElement(ElementName, ElementFunction)
	OrionLib.Elements[ElementName] = function(...)
		return ElementFunction(...)
	end
end

local function AddItemTable(Table, Item, Value)
	local Item = tostring(Item)
	local Count = 1

	while Table[Item] do
		Count = Count + 1
		Item = string.format('%s-%d', Item, Count)
	end

	Table[Item] = Value
end


local function MakeElement(ElementName, ...)
	local NewElement = OrionLib.Elements[ElementName](...)
	return NewElement
end

local function SetProps(Element, Props)
	table.foreach(Props, function(Property, Value)
		Element[Property] = Value
	end)
	return Element
end

local Total = {
	SetChildren = 0;
	AddThemeObject = 0;
}

local function SetChildren(Element, Children)
	Total.SetChildren = Total.SetChildren + 1
	table.foreach(Children, function(_, Child)
		Child.Parent = Element
	end)
	return Element
end

local function Round(Number, Factor)
	local Result = math.floor(Number/Factor + (math.sign(Number) * 0.5)) * Factor
	if Result < 0 then Result = Result + Factor end
	return Result
end

local function ReturnProperty(Object)
    if Object:IsA("TextLabel") or Object:IsA("TextBox") then
        return "TextColor3"
    end 
    if Object:IsA("ScrollingFrame") then
        return "ScrollBarImageColor3"
    end 
    if Object:IsA("UIStroke") then
        return "Color"
    end   
    if Object:IsA("ImageLabel") or Object:IsA("ImageButton") then
        return "ImageColor3"
    end
    if Object:IsA("Frame") or Object:IsA("TextButton") then
        return "BackgroundColor3"
    end 
    
    warn("ReturnProperty: Tipo nÃ£o reconhecido -", Object.ClassName)
    return nil
end

local function AddThemeObject(Object, Type)
    if not OrionLib.ThemeObjects[Type] then
        OrionLib.ThemeObjects[Type] = {}
    end    
    
    Total.AddThemeObject = Total.AddThemeObject + 1
    table.insert(OrionLib.ThemeObjects[Type], Object)
    
    local themeColor = OrionLib.Themes[OrionLib.SelectedTheme][Type]
    local property = ReturnProperty(Object)
    
    if themeColor and property and Object[property] ~= nil then
        Object[property] = themeColor
    else
        warn("AddThemeObject Failed:")
        warn("- Object:", Object)
        warn("- Type:", Type)
        warn("- Property:", property)
        warn("- ThemeColor:", themeColor)
        warn("- SelectedTheme:", OrionLib.SelectedTheme)
    end
    
    return Object
end  

local ResizeHandle = Instance.new("Frame")

function OrionLib:SetTheme()
    for Name, Type in pairs(self.ThemeObjects) do
        for _, Object in pairs(Type) do
            Object[ReturnProperty(Object)] = self.Themes[self.SelectedTheme][Name]
        end    
    end
	ResizeHandle.BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main
end

local function PackColor(Color)
	return {R = Color.R * 255, G = Color.G * 255, B = Color.B * 255}
end    

local function UnpackColor(Color)
	return Color3.fromRGB(Color.R, Color.G, Color.B)
end

local function LoadCfg(Config)
	local Data = HttpService:JSONDecode(Config)
	table.foreach(Data, function(a,b)
		if OrionLib.Flags[a] then
			spawn(function() 
				if OrionLib.Flags[a].Type == "Colorpicker" then
					OrionLib.Flags[a]:Set(UnpackColor(b))
				else
					OrionLib.Flags[a]:Set(b)
				end    
			end)
		else
			warn("Orion Library Config Loader - Could not find ", a ,b)
		end
	end)
end

local function SaveCfg(Name)
	local Data = {}
	for i,v in pairs(OrionLib.Flags) do
		if v.Save then
			if v.Type == "Colorpicker" then
				Data[i] = PackColor(v.Value)
			else
				Data[i] = v.Value
			end
		end	
	end

	if writefile then
		writefile(OrionLib.Folder .. "/" .. Name .. ".txt", tostring(HttpService:JSONEncode(Data)))
	end
end

local WhitelistedMouse = {Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2,Enum.UserInputType.MouseButton3}
local BlacklistedKeys = {Enum.KeyCode.Unknown,Enum.KeyCode.W,Enum.KeyCode.A,Enum.KeyCode.S,Enum.KeyCode.D,Enum.KeyCode.Up,Enum.KeyCode.Left,Enum.KeyCode.Down,Enum.KeyCode.Right,Enum.KeyCode.Slash,Enum.KeyCode.Tab,Enum.KeyCode.Backspace,Enum.KeyCode.Escape}
local freeMouse = Create("TextButton", {
    Name = "FMouse", 
    Size = UDim2.new(0, 100, 0, 50),  
    BackgroundTransparency = 1,        
    Text = "",                        
    Position = UDim2.new(0, 100, 0, 100),  
    Modal = false,                    
    Parent = Orion,                   
    Visible = true                   
})
local mouselock = false
local zoomMinimoLiberado = 10
local zoomMaximoLiberado = 100
local zoomNormal = 0.5

function UnlockMouse(Value)
    if OrionLib.UnlockMouseMode == "TB" then
        if Value then
            mouselock = true
			LocalPlayer.CameraMode = Enum.CameraMode.LockFirstPerson
            LocalPlayer.CameraMode = Enum.CameraMode.Classic
            UserInputService.MouseBehavior = Enum.MouseBehavior.Default
            UserInputService.MouseIconEnabled = true
            LocalPlayer.CameraMaxZoomDistance = zoomMaximoLiberado
            LocalPlayer.CameraMinZoomDistance = zoomMinimoLiberado
        else
            mouselock = false
            UserInputService.MouseIconEnabled = false
            UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
            LocalPlayer.CameraMaxZoomDistance = zoomNormal
            LocalPlayer.CameraMinZoomDistance = zoomNormal
            LocalPlayer.CameraMode = Enum.CameraMode.LockFirstPerson
			freeMouse.Modal = false
        end
    elseif OrionLib.UnlockMouseMode == "N" then
		if Value then 
			LocalPlayer.CameraMode = Enum.CameraMode.Classic
			LocalPlayer.CameraMaxZoomDistance = zoomNormal
			LocalPlayer.CameraMinZoomDistance = zoomNormal
			UserInputService.MouseBehavior = Enum.MouseBehavior.Default
			UserInputService.MouseIconEnabled = true
			freeMouse.Modal = Value
		else
			LocalPlayer.CameraMode = Enum.CameraMode.LockFirstPerson
			LocalPlayer.CameraMaxZoomDistance = zoomNormal
			LocalPlayer.CameraMinZoomDistance = zoomNormal
			UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
			UserInputService.MouseIconEnabled = false
			freeMouse.Modal = Value
		end
    end
end

local function CheckKey(Table, Key)
	for _, v in next, Table do
		if v == Key then
			return true
		end
	end
end

CreateElement("Corner", function(Scale, Offset)
	local Corner = Create("UICorner", {
		CornerRadius = UDim.new(Scale or 0, Offset or 10)
	})
	return Corner
end)

CreateElement("Stroke", function(Color, Thickness)
	local Stroke = Create("UIStroke", {
		Color = Color or Color3.fromRGB(255, 255, 255),
		Thickness = Thickness or 1
	})
	return Stroke
end)

CreateElement("List", function(Scale, Offset)
	local List = Create("UIListLayout", {
		SortOrder = Enum.SortOrder.LayoutOrder,
		Padding = UDim.new(Scale or 0, Offset or 0)
	})
	return List
end)

CreateElement("Padding", function(Bottom, Left, Right, Top)
	local Padding = Create("UIPadding", {
		PaddingBottom = UDim.new(0, Bottom or 4),
		PaddingLeft = UDim.new(0, Left or 4),
		PaddingRight = UDim.new(0, Right or 4),
		PaddingTop = UDim.new(0, Top or 4)
	})
	return Padding
end)

CreateElement("TFrame", function()
	local TFrame = Create("Frame", {
		BackgroundTransparency = 1
	})
	return TFrame
end)

CreateElement("Frame", function(Color)
	local Frame = Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	})
	return Frame
end)

CreateElement("RoundFrame", function(Color, Scale, Offset)
	local Frame = Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	}, {
		Create("UICorner", {
			CornerRadius = UDim.new(Scale, Offset)
		})
	})
	return Frame
end)

CreateElement("Button", function()
	local Button = Create("TextButton", {
		Text = "",
		AutoButtonColor = false,
		BackgroundTransparency = 1,
		BorderSizePixel = 0
	})
	return Button
end)

CreateElement("ScrollFrame", function(Color, Width)
	local ScrollFrame = Create("ScrollingFrame", {
		BackgroundTransparency = 1,
		MidImage = "rbxassetid://7445543667",
		BottomImage = "rbxassetid://7445543667",
		TopImage = "rbxassetid://7445543667",
		ScrollBarImageColor3 = Color,
		BorderSizePixel = 0,
		ScrollBarThickness = Width,
		CanvasSize = UDim2.new(0, 0, 0, 0)
	})
	return ScrollFrame
end)

CreateElement("Image", function(ImageID)
	local ImageNew = Create("ImageLabel", {
		Image = ImageID,
		BackgroundTransparency = 1
	})

	if GetIcon(ImageID) ~= nil then
		ImageNew.Image = GetIcon(ImageID)
	end	

	return ImageNew
end)

CreateElement("ImageButton", function(ImageID)
	local Image = Create("ImageButton", {
		Image = ImageID,
		BackgroundTransparency = 1
	})
	return Image
end)

CreateElement("Label", function(Text, TextSize, Transparency)
	local Label = Create("TextLabel", {
		Text = Text or "",
		TextColor3 = Color3.fromRGB(240, 240, 240),
		TextTransparency = Transparency or 0,
		TextSize = TextSize or 15,
		Font = Enum.Font.Gotham,
		RichText = true,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Left
	})
	return Label
end)

CreateElement("TextBox", function()
	local TextBox = Create("TextBox", {
		BackgroundTransparency = 1,
		BorderSizePixel = 0,
		Font = Enum.Font.Gotham,
		TextSize = 14,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		PlaceholderColor3 = Color3.fromRGB(150, 150, 150),
		Text = "",
		ClearTextOnFocus = false
	})
	return TextBox
end)

local NotificationHolder = SetProps(SetChildren(MakeElement("TFrame"), {
	SetProps(MakeElement("List"), {
		HorizontalAlignment = Enum.HorizontalAlignment.Center,
		SortOrder = Enum.SortOrder.LayoutOrder,
		VerticalAlignment = Enum.VerticalAlignment.Bottom,
		Padding = UDim.new(0, 5)
	})
}), {
	Position = UDim2.new(1, -25, 1, -25),
	Size = UDim2.new(0, 300, 1, -25),
	AnchorPoint = Vector2.new(1, 1),
	Parent = Orion
})

function OrionLib:MakeNotification(NotificationConfig)
	spawn(function()
		NotificationConfig.Name = NotificationConfig.Name or "Notification"
		NotificationConfig.Content = NotificationConfig.Content or "Test"
		NotificationConfig.Image = NotificationConfig.Image or "rbxassetid://4384403532"
		NotificationConfig.Time = NotificationConfig.Time or 15

		local NotificationParent = SetProps(MakeElement("TFrame"), {
			Size = UDim2.new(1, 0, 0, 0),
			AutomaticSize = Enum.AutomaticSize.Y,
			Parent = NotificationHolder
		})

		local NotificationFrame = SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(25, 25, 25), 0, 10), {
			Parent = NotificationParent, 
			Size = UDim2.new(1, 0, 0, 0),
			Position = UDim2.new(1, -55, 0, 0),
			BackgroundTransparency = 0,
			AutomaticSize = Enum.AutomaticSize.Y
		}), {
			MakeElement("Stroke", Color3.fromRGB(93, 93, 93), 1.2),
			MakeElement("Padding", 12, 12, 12, 12),
			SetProps(MakeElement("Image", NotificationConfig.Image), {
				Size = UDim2.new(0, 20, 0, 20),
				ImageColor3 = Color3.fromRGB(240, 240, 240),
				Name = "Icon"
			}),
			SetProps(MakeElement("Label", NotificationConfig.Name, 15), {
				Size = UDim2.new(1, -30, 0, 20),
				Position = UDim2.new(0, 30, 0, 0),
				Font = Enum.Font.GothamBold,
				Name = "Title"
			}),
			SetProps(MakeElement("Label", NotificationConfig.Content, 14), {
				Size = UDim2.new(1, 0, 0, 0),
				Position = UDim2.new(0, 0, 0, 25),
				Font = Enum.Font.GothamSemibold,
				Name = "Content",
				AutomaticSize = Enum.AutomaticSize.Y,
				TextColor3 = Color3.fromRGB(200, 200, 200),
				TextWrapped = true
			})
		})

		TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Position = UDim2.new(0, 0, 0, 0)}):Play()

		wait(NotificationConfig.Time - 0.88)
		TweenService:Create(NotificationFrame.Icon, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
		TweenService:Create(NotificationFrame, TweenInfo.new(0.8, Enum.EasingStyle.Quint), {BackgroundTransparency = 0.6}):Play()
		wait(0.3)
		TweenService:Create(NotificationFrame.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {Transparency = 0.9}):Play()
		TweenService:Create(NotificationFrame.Title, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {TextTransparency = 0.4}):Play()
		TweenService:Create(NotificationFrame.Content, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {TextTransparency = 0.5}):Play()
		wait(0.05)

		NotificationFrame:TweenPosition(UDim2.new(1, 20, 0, 0),'In','Quint',0.8,true)
		wait(1.35)
		NotificationFrame:Destroy()
	end)
end   

function OrionLib:Init()
	if OrionLib.SaveCfg and (isfile and readfile) then	
		pcall(function()
			if isfile(OrionLib.Folder .. "/" .. game.GameId .. ".txt") then
				LoadCfg(readfile(OrionLib.Folder .. "/" .. game.GameId .. ".txt"))
				OrionLib:MakeNotification({
					Name = "Configuration",
					Content = "Auto-loaded configuration for the game " .. game.GameId .. ".",
					Time = 5
				})
			end
		end)		
	end	
end	

function OrionLib:MakeWindow(WindowConfig)
	local FirstTab = true
	local Minimized = false
	local Loaded = false
	local UIHidden = false

	WindowConfig = WindowConfig or {}
	WindowConfig.Name = WindowConfig.Name
	WindowConfig.ConfigFolder = WindowConfig.ConfigFolder or WindowConfig.Name
	WindowConfig.SaveConfig = WindowConfig.SaveConfig or false
	WindowConfig.HidePremium = WindowConfig.HidePremium or false
	if WindowConfig.IntroEnabled == nil then
		WindowConfig.IntroEnabled = true
	end
	WindowConfig.FreeMouse = WindowConfig.FreeMouse or false
	WindowConfig.KeyToOpenWindow = WindowConfig.KeyToOpenWindow or "RightShift"
	WindowConfig.IntroText = WindowConfig.IntroText or "Orion Library"
	WindowConfig.CloseCallback = WindowConfig.CloseCallback or function() end
	WindowConfig.ShowIcon = WindowConfig.ShowIcon or false
	WindowConfig.Icon = WindowConfig.Icon or "rbxassetid://8834748103"
	WindowConfig.IntroIcon = WindowConfig.IntroIcon or "rbxassetid://8834748103"
	WindowConfig.SearchBar = WindowConfig.SearchBar or nil
	OrionLib.Folder = WindowConfig.ConfigFolder
	OrionLib.SaveCfg = WindowConfig.SaveConfig

	if WindowConfig.FreeMouse then
		UnlockMouse(true)
	end

	if WindowConfig.SaveConfig then
		if (isfolder and makefolder) and not isfolder(WindowConfig.ConfigFolder) then
			makefolder(WindowConfig.ConfigFolder)
		end	
	end

	local TabHolder = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", Color3.fromRGB(255, 255, 255), 4),
		WindowConfig.SearchBar and {
			Size = UDim2.new(1, 0, 1, -90),
			Position = UDim2.new(0, 0, 0, 40)
		} or {
			Size = UDim2.new(1, 0, 1, -50)
		}),
		{
			MakeElement("List"),
			MakeElement("Padding", 8, 0, 0, 8)
		}), "Divider")

	AddConnection(TabHolder.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
		TabHolder.CanvasSize = UDim2.new(0, 0, 0, TabHolder.UIListLayout.AbsoluteContentSize.Y + 16)
	end)

	local CloseBtn = SetChildren(SetProps(MakeElement("Button"), {
		Size = UDim2.new(0.5, 0, 1, 0),
		Position = UDim2.new(0.5, 0, 0, 0),
		BackgroundTransparency = 1
	}), {
		AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072725342"), {
			Position = UDim2.new(0, 9, 0, 6),
			Size = UDim2.new(0, 18, 0, 18)
		}), "Text")
	})

	local MinimizeBtn = SetChildren(SetProps(MakeElement("Button"), {
		Size = UDim2.new(0.5, 0, 1, 0),
		BackgroundTransparency = 1
	}), {
		AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072719338"), {
			Position = UDim2.new(0, 9, 0, 6),
			Size = UDim2.new(0, 18, 0, 18),
			Name = "Ico"
		}), "Text")
	})

	local DragPoint = SetProps(MakeElement("TFrame"), {
		Size = UDim2.new(1, 0, 0, 50)
	})

	local WindowStuff = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 10), {
		Size = UDim2.new(0, 150, 1, -50),
		Position = UDim2.new(0, 0, 0, 50)
	}), {
		AddThemeObject(SetProps(MakeElement("Frame"), {
			Size = UDim2.new(1, 0, 0, 10),
			Position = UDim2.new(0, 0, 0, 0)
		}), "Second"), 
		AddThemeObject(SetProps(MakeElement("Frame"), {
			Size = UDim2.new(0, 10, 1, 0),
			Position = UDim2.new(1, -10, 0, 0)
		}), "Second"), 
		AddThemeObject(SetProps(MakeElement("Frame"), {
			Size = UDim2.new(0, 1, 1, 0),
			Position = UDim2.new(1, -1, 0, 0)
		}), "Stroke"), 
		TabHolder,
		SetChildren(SetProps(MakeElement("TFrame"), {
			Size = UDim2.new(1, 0, 0, 50),
			Position = UDim2.new(0, 0, 1, -50)
		}), {
			AddThemeObject(SetProps(MakeElement("Frame"), {
				Size = UDim2.new(1, 0, 0, 1)
			}), "Stroke"), 
			AddThemeObject(SetChildren(SetProps(MakeElement("Frame"), {
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 32, 0, 32),
				Position = UDim2.new(0, 10, 0.5, 0)
			}), {
				SetProps(MakeElement("Image", "https://www.roblox.com/headshot-thumbnail/image?userId=".. LocalPlayer.UserId .."&width=420&height=420&format=png"), {
					Size = UDim2.new(1, 0, 1, 0)
				}),
				AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://4031889928"), {
					Size = UDim2.new(1, 0, 1, 0),
				}), "Second"),
				MakeElement("Corner", 1)
			}), "Divider"),
			SetChildren(SetProps(MakeElement("TFrame"), {
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 32, 0, 32),
				Position = UDim2.new(0, 10, 0.5, 0)
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				MakeElement("Corner", 1)
			}),
			AddThemeObject(SetProps(MakeElement("Label", LocalPlayer.DisplayName, WindowConfig.HidePremium and 14 or 13), {
				Size = UDim2.new(1, -60, 0, 13),
				Position = WindowConfig.HidePremium and UDim2.new(0, 50, 0, 19) or UDim2.new(0, 50, 0, 12),
				Font = Enum.Font.GothamBold,
				ClipsDescendants = true
			}), "Text"),
			AddThemeObject(SetProps(MakeElement("Label", "", 12), {
				Size = UDim2.new(1, -60, 0, 12),
				Position = UDim2.new(0, 50, 1, -25),
				Visible = not WindowConfig.HidePremium
			}), "TextDark")
		}),
	}), "Second")

	local Tabs = {};
	
	local SearchSystem = {
		Elements = {}, 
		CurrentResults = {},
		IsSearching = false,
		TabContainers = {} 
	}
	
	function RegisterTabContainer(tabName, containerFrame)
		SearchSystem.TabContainers[tabName] = containerFrame
	end
	
	function RegisterElement(tabName, elementName, elementFrame)
		if not SearchSystem.Elements[tabName] then
			SearchSystem.Elements[tabName] = {}
		end
		
		SearchSystem.Elements[tabName][elementName] = {
			frame = elementFrame,
			originalParent = elementFrame.Parent,
			visible = true
		}
	end
	
	function ClearSearchResults()
		for tabName, elements in pairs(SearchSystem.Elements) do
			for elementName, data in pairs(elements) do
				if data.frame and data.frame.Visible ~= nil then
					data.frame.Visible = data.visible
				end
			end
		end
		SearchSystem.CurrentResults = {}
		SearchSystem.IsSearching = false
	end
	
	function PerformSearch(searchText, tabs, mainWindow)
		searchText = string.lower(searchText)
		
		if searchText == "" then
			ClearSearchResults()
			return
		end
		
		SearchSystem.IsSearching = true
		SearchSystem.CurrentResults = {}
		
		local foundResults = false
		local targetTab = nil
		
		-- Primeiro, esconder todos os elementos
		for tabName, elements in pairs(SearchSystem.Elements) do
			for elementName, data in pairs(elements) do
				if data.frame and data.frame.Visible ~= nil then
					data.frame.Visible = false
				end
			end
		end
		
		-- Procurar elementos que correspondem Ã  pesquisa
		for tabName, elements in pairs(SearchSystem.Elements) do
			for elementName, data in pairs(elements) do
				local elementNameLower = string.lower(elementName)
				
				if string.find(elementNameLower, searchText) then
					SearchSystem.CurrentResults[tabName] = SearchSystem.CurrentResults[tabName] or {}
					SearchSystem.CurrentResults[tabName][elementName] = data
					
					if data.frame and data.frame.Visible ~= nil then
						data.frame.Visible = true
					end
					foundResults = true
					
					-- Definir a primeira tab que tem resultados como alvo
					if not targetTab then
						targetTab = tabName
					end
				end
			end
		end
		
		-- Se encontrou resultados, mudar para a tab correta
		if foundResults and targetTab and tabs[targetTab] then
			-- MÃ©todo direto: simular clique na tab
			local targetTabFrame = tabs[targetTab]
			
			-- Primeiro desativar todas as tabs
			for _, Tab in pairs(TabHolder:GetChildren()) do
				if Tab:IsA("TextButton") then
					Tab.Title.Font = Enum.Font.GothamSemibold
					TweenService:Create(Tab.Ico, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = 0.4}):Play()
					TweenService:Create(Tab.Title, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {TextTransparency = 0.4}):Play()
				end    
			end
			
			for _, ItemContainer in pairs(MainWindow:GetChildren()) do
				if ItemContainer.Name == "ItemContainer" then
					ItemContainer.Visible = false
				end    
			end
			
			TweenService:Create(targetTabFrame.Ico, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = 0}):Play()
			TweenService:Create(targetTabFrame.Title, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()
			targetTabFrame.Title.Font = Enum.Font.GothamBlack
			
			local targetContainer = SearchSystem.TabContainers[targetTab]
			if targetContainer then
				targetContainer.Visible = true
			end
		end
	end

	function SearchHandle()
		local searchText = string.lower(SearchBox.Text)
		
		if searchText == "" then
			for tabName, tabFrame in pairs(Tabs) do
				if tabFrame:IsA('TextButton') then
					tabFrame.Visible = true
				end
			end
			ClearSearchResults()
		else
			PerformSearch(searchText, Tabs, MainWindow)
			
			for tabName, tabFrame in pairs(Tabs) do
				if tabFrame:IsA('TextButton') then
					local hasResults = SearchSystem.CurrentResults[tabName] ~= nil
					local tabNameMatches = string.find(string.lower(tabName), searchText) ~= nil
					
					tabFrame.Visible = hasResults or tabNameMatches
				end
			end
		end
	end

	if WindowConfig.SearchBar then
		local SearchBox = Create("TextBox", {
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundTransparency = 1,
			TextColor3 = Color3.fromRGB(255, 255, 255),
			PlaceholderColor3 = Color3.fromRGB(210,210,210),
			PlaceholderText = "Search",
			Font = Enum.Font.GothamBold,
			TextWrapped = true,
			Text = '',
			TextXAlignment = Enum.TextXAlignment.Center,
			TextSize = 14,
			ClearTextOnFocus = false
		})
	
		local TextboxActual = AddThemeObject(SearchBox, "Text")
	
		local SearchBar = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 1, 6), {
			Parent = WindowStuff,
			Size = UDim2.new(0, 130, 0, 24),
			Position = UDim2.new(1.013, -12, 0.075, 0),
			AnchorPoint = Vector2.new(1, 0.5)
		}), {
			AddThemeObject(MakeElement("Stroke"), "Stroke"),
			TextboxActual
		}), "Main")
	
		local function SearchHandle()
			local searchText = string.lower(SearchBox.Text)
			
			if searchText == "" then
				for tabName, tabFrame in pairs(Tabs) do
					if tabFrame:IsA('TextButton') then
						tabFrame.Visible = true
					end
				end
				ClearSearchResults()
			else
				PerformSearch(searchText, Tabs)
				
				for tabName, tabFrame in pairs(Tabs) do
					if tabFrame:IsA('TextButton') then
						local hasResults = SearchSystem.CurrentResults[tabName] ~= nil
						local tabNameMatches = string.find(string.lower(tabName), searchText) ~= nil
						
						tabFrame.Visible = hasResults or tabNameMatches
					end
				end
			end
		end
	
		AddConnection(TextboxActual:GetPropertyChangedSignal("Text"), SearchHandle)
	end
	
		
	local WindowName = AddThemeObject(SetProps(MakeElement("Label", WindowConfig.Name, 14), {
		Size = UDim2.new(1, -30, 2, 0),
		Position = UDim2.new(0, 25, 0, -24),
		Font = Enum.Font.GothamBlack,
		TextSize = 20
	}), "Text")

	local WindowTopBarLine = AddThemeObject(SetProps(MakeElement("Frame"), {
		Size = UDim2.new(1, 0, 0, 1),
		Position = UDim2.new(0, 0, 1, -1)
	}), "Stroke")

	local MainWindow = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 10), {
		Parent = Orion,
		Position = UDim2.new(0.5, -307, 0.5, -172),
		Size = UDim2.new(0, 615, 0, 344),
		ClipsDescendants = true
	}), {
		SetChildren(SetProps(MakeElement("TFrame"), {
			Size = UDim2.new(1, 0, 0, 50),
			Name = "TopBar"
		}), {
			WindowName,
			WindowTopBarLine,
			AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 7), {
				Size = UDim2.new(0, 70, 0, 30),
				Position = UDim2.new(1, -90, 0, 10)
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				AddThemeObject(SetProps(MakeElement("Frame"), {
					Size = UDim2.new(0, 1, 1, 0),
					Position = UDim2.new(0.5, 0, 0, 0)
				}), "Stroke"), 
				CloseBtn,
				MinimizeBtn
			}), "Second"), 
		}),
		DragPoint,
		WindowStuff
	}), "Main")

	ResizeHandle.Size = UDim2.new(0, 16, 0, 16)
	ResizeHandle.Position = UDim2.new(1, -16, 1, -16)
	ResizeHandle.BorderSizePixel = 0
	ResizeHandle.Parent = MainWindow
	ResizeHandle.Visible = true
	ResizeHandle.AnchorPoint = Vector2.new(0.1, 0.1)
	ResizeHandle.BackgroundTransparency = 0
	ResizeHandle.ClipsDescendants = true
	
	local UICorner = Instance.new("UICorner")
	UICorner.CornerRadius = UDim.new(0.5, 0)
	UICorner.Parent = ResizeHandle

	ResizeHandle.BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main

	local UIS = game:GetService("UserInputService")
	local dragging = false
	local lastMousePos
	local lastClickTime = 0
	local defaultSize = UDim2.new(0, 615, 0, 344)

	ResizeHandle.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			local currentTime = tick()
	
			if currentTime - lastClickTime <= 0.5 then
				local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
				local tween = TweenService:Create(MainWindow, tweenInfo, { Size = defaultSize })
				tween:Play()
				dragging = false 
			else
				dragging = true
				lastMousePos = input.Position
			end
	
			lastClickTime = currentTime
		end
	end)
	
	
	UIS.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			local delta = input.Position - lastMousePos
			lastMousePos = input.Position
	
			local newWidth = math.max(415, MainWindow.Size.X.Offset + delta.X)
			local newHeight = math.max(307, MainWindow.Size.Y.Offset + delta.Y)
	
			MainWindow.Size = UDim2.new(0, newWidth, 0, newHeight)
		end
	end)
	
	UIS.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
		end
	end)


	if WindowConfig.ShowIcon then
		WindowName.Position = UDim2.new(0, 50, 0, -24)
		local WindowIcon = SetProps(MakeElement("Image", WindowConfig.Icon), {
			Size = UDim2.new(0, 20, 0, 20),
			Position = UDim2.new(0, 25, 0, 15)
		})
		WindowIcon.Parent = MainWindow.TopBar
	end

	WindowStuff:GetPropertyChangedSignal("Visible"):Connect(function()
		ResizeHandle.Visible = WindowStuff.Visible
	end)

	MakeDraggable(DragPoint, MainWindow)
	
	AddConnection(CloseBtn.MouseButton1Up, function()
		MainWindow.Visible = false
		UIHidden = true
		
		if WindowConfig.FreeMouse then
			UnlockMouse(false)
		end
		
	end)

	AddConnection(UserInputService.InputBegan, function(Input, Focus)
		if not Focus then
			if Input.KeyCode == Enum.KeyCode[WindowConfig.KeyToOpenWindow] and UIHidden then
				MainWindow.Visible = true
				UIHidden = false
				if WindowConfig.FreeMouse then
					UnlockMouse(true)
				end
			elseif Input.KeyCode == Enum.KeyCode[WindowConfig.KeyToOpenWindow] and not UIHidden then
				MainWindow.Visible = false
				UIHidden = true

				if WindowConfig.FreeMouse then
					UnlockMouse(false)
				end
				OrionLib:MakeNotification({
					Name = "Interface Hidden",
					Content = "Tap "  .. WindowConfig.KeyToOpenWindow .. " to reopen the interface",
					Time = 3
				})
			end
		end
	end)

	AddConnection(MinimizeBtn.MouseButton1Up, function()
		if Minimized then
			TweenService:Create(MainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, 615, 0, 344)}):Play()
			MinimizeBtn.Ico.Image = "rbxassetid://7072719338"
			wait(.02)
			MainWindow.ClipsDescendants = false
			WindowStuff.Visible = true
			WindowTopBarLine.Visible = true
		else
			MainWindow.ClipsDescendants = true
			WindowTopBarLine.Visible = false
			MinimizeBtn.Ico.Image = "rbxassetid://7072720870"

			TweenService:Create(MainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, WindowName.TextBounds.X + 140, 0, 50)}):Play()
			wait(0.1)
			WindowStuff.Visible = false	
		end
		Minimized = not Minimized    
	end)

	local function LoadSequence()
		MainWindow.Visible = false
		local LoadSequenceLogo = SetProps(MakeElement("Image", WindowConfig.IntroIcon), {
			Parent = Orion,
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 0, 0.4, 0),
			Size = UDim2.new(0, 28, 0, 28),
			ImageColor3 = Color3.fromRGB(255, 255, 255),
			ImageTransparency = 1
		})

		local LoadSequenceText = SetProps(MakeElement("Label", WindowConfig.IntroText, 14), {
			Parent = Orion,
			Size = UDim2.new(1, 0, 1, 0),
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 19, 0.5, 0),
			TextXAlignment = Enum.TextXAlignment.Center,
			Font = Enum.Font.GothamBold,
			TextTransparency = 1
		})

		TweenService:Create(LoadSequenceLogo, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageTransparency = 0, Position = UDim2.new(0.5, 0, 0.5, 0)}):Play()
		wait(0.8)
		TweenService:Create(LoadSequenceLogo, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(0.5, -(LoadSequenceText.TextBounds.X/2), 0.5, 0)}):Play()
		wait(0.3)
		TweenService:Create(LoadSequenceText, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()
		wait(2)
		TweenService:Create(LoadSequenceText, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 1}):Play()
		MainWindow.Visible = true
		LoadSequenceLogo:Destroy()
		LoadSequenceText:Destroy()
	end 

	if WindowConfig.IntroEnabled then
		LoadSequence()
	end

	if WindowConfig.FreeMouse then
		OrionLib:MakeNotification({
			Name = "Free Mouse mode is on",
			Content = "if you want it to go back to normal, just press Right Shift or close the GUI",
			Time = 5
		})
	end

	local Functions = {}

	function Functions:SetName(...)
		local args = {...}
		local result = ""
	
		for _, pair in ipairs(args) do
			local text, color = unpack(pair)
			color = color or "#FFFFFF"
	
			for i = 1, #text do
				local char = text:sub(i, i)
				result = result .. '<font color="' .. color .. '">' .. char .. '</font>'
			end
		end
	
		WindowName.RichText = true
		WindowName.Text = result
	end

	function Functions:MakeTab(TabConfig)
		TabConfig = TabConfig or {}
		TabConfig.Name = TabConfig.Name or "Tab"
		TabConfig.Icon = TabConfig.Icon or ""
		TabConfig.PremiumOnly = TabConfig.PremiumOnly or false

		local TabFrame = SetChildren(SetProps(MakeElement("Button"), {
			Size = UDim2.new(1, 0, 0, 30),
			Parent = TabHolder
		}), {
			AddThemeObject(SetProps(MakeElement("Image", TabConfig.Icon), {
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 18, 0, 18),
				Position = UDim2.new(0, 10, 0.5, 0),
				ImageTransparency = 0.4,
				Name = "Ico"
			}), "Text"),
			AddThemeObject(SetProps(MakeElement("Label", TabConfig.Name, 14), {
				Size = UDim2.new(1, -35, 1, 0),
				Position = UDim2.new(0, 35, 0, 0),
				Font = Enum.Font.GothamSemibold,
				TextTransparency = 0.4,
				Name = "Title"
			}), "Text")
		})

		AddItemTable(Tabs, TabConfig.Name, TabFrame)

		if GetIcon(TabConfig.Icon) ~= nil then
			TabFrame.Ico.Image = GetIcon(TabConfig.Icon)
		end	

		local Container = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", Color3.fromRGB(255, 255, 255), 5), {
			Size = UDim2.new(1, -150, 1, -50),
			Position = UDim2.new(0, 150, 0, 50),
			Parent = MainWindow,
			Visible = false,
			Name = "ItemContainer"
		}), {
			MakeElement("List", 0, 6),
			MakeElement("Padding", 15, 10, 10, 15)
		}), "Divider")

		AddConnection(Container.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
			Container.CanvasSize = UDim2.new(0, 0, 0, Container.UIListLayout.AbsoluteContentSize.Y + 30)
		end)
		RegisterTabContainer(TabConfig.Name, Container)
		if FirstTab then
			FirstTab = false
			TabFrame.Ico.ImageTransparency = 0
			TabFrame.Title.TextTransparency = 0
			TabFrame.Title.Font = Enum.Font.GothamBlack
			Container.Visible = true
		end    

		AddConnection(TabFrame.MouseButton1Click, function()
			for _, Tab in next, TabHolder:GetChildren() do
				if Tab:IsA("TextButton") then
					Tab.Title.Font = Enum.Font.GothamSemibold
					TweenService:Create(Tab.Ico, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = 0.4}):Play()
					TweenService:Create(Tab.Title, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {TextTransparency = 0.4}):Play()
				end    
			end
			for _, ItemContainer in next, MainWindow:GetChildren() do
				if ItemContainer.Name == "ItemContainer" then
					ItemContainer.Visible = false
				end    
			end  
			TweenService:Create(TabFrame.Ico, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = 0}):Play()
			TweenService:Create(TabFrame.Title, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()
			TabFrame.Title.Font = Enum.Font.GothamBlack
			Container.Visible = true   
		end)

		local function GetElements(ItemParent)
			local ElementFunction = {}
			function ElementFunction:AddLog(Text)
				local Label = MakeElement("Label", Text, 15)
				local LogFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 1, 0),
					BackgroundTransparency = 0.7,
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(Label, {
						Size = UDim2.new(1, -12, 1, 0),
						Position = UDim2.new(0, 12, 0, 0),
						TextXAlignment = Enum.TextXAlignment.Center,
						TextSize = 19,
						TextWrapped = true,
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Second")

				local LogFunction = {}
				function LogFunction:Set(ToChange)
					LogFrame.Content.Text = ToChange
				end
				return LogFunction
			end
			function ElementFunction:AddLabel(Text)
				local LabelFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 30),
					BackgroundTransparency = 0.7,
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", Text, 15), {
						Size = UDim2.new(1, -12, 1, 0),
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Second")

				local LabelFunction = {}
				function LabelFunction:Set(ToChange)
					LabelFrame.Content.Text = ToChange
				end
				RegisterElement(ItemParent.Name, Text, LabelFrame)
				return LabelFunction
			end

			function ElementFunction:ColoredAddLabel(Text, ToChangeColor, Position)
				local LabelFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 30),
					BackgroundTransparency = 0.7,
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", Text, 15), {
						Size = UDim2.new(1, -12, 1, 0),
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Second")
			
				local LabelFunction2 = {}
				local TweenService = game:GetService("TweenService")
			
				function LabelFunction2:Set(ToChange, ToChangeColor, Position)
					LabelFrame.Content.Text = ToChange
			
					if ToChangeColor then
						LabelFrame.Content.TextColor3 = ToChangeColor
					else
						LabelFrame.Content.TextColor3 = Color3.fromRGB(255, 255, 255)
					end
					
					local targetPosition
					if Position == "Left" then
						targetPosition = UDim2.new(0, 12, 0, 0)
					elseif Position == "Center" then
						targetPosition = UDim2.new(0.5, -LabelFrame.Content.TextBounds.X / 2, 0, 0)
					elseif Position == "Right" then
						targetPosition = UDim2.new(1, -LabelFrame.Content.TextBounds.X - 12, 0, 0)
					else
						targetPosition = UDim2.new(0.5, -LabelFrame.Content.TextBounds.X / 2, 0, 0)
					end
			
					local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
					local tweenGoal = {Position = targetPosition}
					local tween = TweenService:Create(LabelFrame.Content, tweenInfo, tweenGoal)
			
					tween:Play()
				end
			
				LabelFunction2:Set(Text, ToChangeColor, Position)
				RegisterElement(ItemParent.Name, Text, LabelFrame)
				return LabelFunction2
			end

			function ElementFunction:AddParagraph(Text, Content)
				Text = Text or "Text"
				Content = Content or "Content"

				local ParagraphFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 30),
					BackgroundTransparency = 0.7,
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", Text, 15), {
						Size = UDim2.new(1, -12, 0, 14),
						Position = UDim2.new(0, 12, 0, 10),
						Font = Enum.Font.GothamBold,
						Name = "Title"
					}), "Text"),
					AddThemeObject(SetProps(MakeElement("Label", "", 13), {
						Size = UDim2.new(1, -24, 0, 0),
						Position = UDim2.new(0, 12, 0, 26),
						Font = Enum.Font.GothamSemibold,
						Name = "Content",
						TextWrapped = true
					}), "TextDark"),
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Second")

				RegisterElement(ItemParent.Name, Text, ParagraphFrame)

				AddConnection(ParagraphFrame.Content:GetPropertyChangedSignal("Text"), function()
					ParagraphFrame.Content.Size = UDim2.new(1, -24, 0, ParagraphFrame.Content.TextBounds.Y)
					ParagraphFrame.Size = UDim2.new(1, 0, 0, ParagraphFrame.Content.TextBounds.Y + 35)
				end)

				ParagraphFrame.Content.Text = Content

				local ParagraphFunction = {}
				function ParagraphFunction:Set(ToChange)
					ParagraphFrame.Content.Text = ToChange
				end
				return ParagraphFunction
			end
			
			function ElementFunction:AddParagraphPosition(Text, Content, Alignment)
				Text = Text or "Text"
				Content = Content or "Content"
				Alignment = Alignment or "Left"
			
				Content = Content:gsub("\\n", "\n")
			
				local ParagraphFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 30),
					BackgroundTransparency = 0.7,
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", Text, 15), {
						Size = UDim2.new(1, -12, 0, 14),
						Position = UDim2.new(0, 12, 0, 10),
						Font = Enum.Font.GothamBold,
						Name = "Title",
						TextXAlignment = Enum.TextXAlignment[Alignment]
					}), "Text"),
					AddThemeObject(SetProps(MakeElement("Label", "", 13), {
						Size = UDim2.new(1, -24, 0, 0),
						Position = UDim2.new(0, 12, 0, 26),
						Font = Enum.Font.GothamSemibold,
						Name = "Content",
						TextWrapped = true,
						TextXAlignment = Enum.TextXAlignment[Alignment]
					}), "TextDark"),
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Second")
				RegisterElement(ItemParent.Name, Text, ParagraphFrame)
				AddConnection(ParagraphFrame.Content:GetPropertyChangedSignal("Text"), function()
					ParagraphFrame.Content.Size = UDim2.new(1, -24, 0, ParagraphFrame.Content.TextBounds.Y)
					ParagraphFrame.Size = UDim2.new(1, 0, 0, ParagraphFrame.Content.TextBounds.Y + 35)
				end)
			
				ParagraphFrame.Content.Text = Content
				ParagraphFrame.Content.TextXAlignment = Enum.TextXAlignment[Alignment]
			
				local ParagraphFunction = {}
				function ParagraphFunction:Set(NewText, NewContent, NewAlignment)
					if NewText then
						ParagraphFrame.Title.Text = NewText
					end
					if NewContent then
						ParagraphFrame.Content.Text = NewContent:gsub("\\n", "\n")
					end
					if NewAlignment then
						ParagraphFrame.Content.TextXAlignment = Enum.TextXAlignment[NewAlignment]
						ParagraphFrame.Title.TextXAlignment = Enum.TextXAlignment[NewAlignment]
					end
				end
			
				return ParagraphFunction
			end

			function ElementFunction:AddButton(ButtonConfig)
				ButtonConfig = ButtonConfig or {}
				ButtonConfig.Name = ButtonConfig.Name or "Button"
				ButtonConfig.Callback = ButtonConfig.Callback or function() end
				ButtonConfig.Icon = ButtonConfig.Icon or "rbxassetid://3944703587"

				local Button = {}

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				local ButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 33),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", ButtonConfig.Name, 15), {
						Size = UDim2.new(1, -12, 1, 0),
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(SetProps(MakeElement("Image", ButtonConfig.Icon), {
						Size = UDim2.new(0, 20, 0, 20),
						Position = UDim2.new(1, -30, 0, 7),
					}), "TextDark"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					Click
				}), "Second")
				RegisterElement(ItemParent.Name, ButtonConfig.Name, ButtonFrame)
				AddConnection(Click.MouseEnter, function()
					TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
				end)

				AddConnection(Click.MouseLeave, function()
					TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play()
				end)

				AddConnection(Click.MouseButton1Up, function()
					TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
					spawn(function()
						ButtonConfig.Callback()
					end)
				end)

				AddConnection(Click.MouseButton1Down, function()
					TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 6)}):Play()
				end)

				function Button:Set(ButtonText)
					ButtonFrame.Content.Text = ButtonText
				end	

				return Button
			end    
			function ElementFunction:AddToggle(ToggleConfig)
				ToggleConfig = ToggleConfig or {}
				ToggleConfig.Name = ToggleConfig.Name or "Toggle"
				ToggleConfig.Default = ToggleConfig.Default or false
				ToggleConfig.Callback = ToggleConfig.Callback or function() end
				ToggleConfig.Color = ToggleConfig.Color or Color3.fromRGB(9, 99, 195)
				ToggleConfig.Flag = ToggleConfig.Flag or nil
				ToggleConfig.Save = ToggleConfig.Save or false

				local Toggle = {Value = ToggleConfig.Default, Save = ToggleConfig.Save}

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				local ToggleBox = SetChildren(SetProps(MakeElement("RoundFrame", ToggleConfig.Color, 0, 4), {
					Size = UDim2.new(0, 24, 0, 24),
					Position = UDim2.new(1, -24, 0.5, 0),
					AnchorPoint = Vector2.new(0.5, 0.5)
				}), {
					SetProps(MakeElement("Stroke"), {
						Color = ToggleConfig.Color,
						Name = "Stroke",
						Transparency = 0.5
					}),
					SetProps(MakeElement("Image", "rbxassetid://3944680095"), {
						Size = UDim2.new(0, 20, 0, 20),
						AnchorPoint = Vector2.new(0.5, 0.5),
						Position = UDim2.new(0.5, 0, 0.5, 0),
						ImageColor3 = Color3.fromRGB(255, 255, 255),
						Name = "Ico"
					}),
				})

				local ToggleFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", ToggleConfig.Name, 15), {
						Size = UDim2.new(1, -12, 1, 0),
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					ToggleBox,
					Click
				}), "Second")
				RegisterElement(ItemParent.Name, ToggleConfig.Name, ToggleFrame)
				function Toggle:Set(Value)
					Toggle.Value = Value
					TweenService:Create(ToggleBox, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Toggle.Value and ToggleConfig.Color or OrionLib.Themes.Default.Divider}):Play()
					TweenService:Create(ToggleBox.Stroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Color = Toggle.Value and ToggleConfig.Color or OrionLib.Themes.Default.Stroke}):Play()
					TweenService:Create(ToggleBox.Ico, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = Toggle.Value and 0 or 1, Size = Toggle.Value and UDim2.new(0, 20, 0, 20) or UDim2.new(0, 8, 0, 8)}):Play()
					ToggleConfig.Callback(Toggle.Value)
				end    

				Toggle:Set(Toggle.Value)

				AddConnection(Click.MouseEnter, function()
					TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
				end)

				AddConnection(Click.MouseLeave, function()
					TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play()
				end)

				AddConnection(Click.MouseButton1Up, function()
					TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
					SaveCfg(game.GameId)
					Toggle:Set(not Toggle.Value)
				end)

				AddConnection(Click.MouseButton1Down, function()
					TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 6)}):Play()
				end)

				if ToggleConfig.Flag then
					OrionLib.Flags[ToggleConfig.Flag] = Toggle
				end	
				return Toggle
			end
			
			function ElementFunction:AddSlider(SliderConfig)
				SliderConfig = SliderConfig or {}
				SliderConfig.Name = SliderConfig.Name or "Slider"
				SliderConfig.Min = SliderConfig.Min or 0
				SliderConfig.Max = SliderConfig.Max or 100
				SliderConfig.Increment = SliderConfig.Increment or 1
				SliderConfig.Default = SliderConfig.Default or 50
				SliderConfig.Callback = SliderConfig.Callback or function() end
				SliderConfig.ValueName = SliderConfig.ValueName or ""
				SliderConfig.Color = SliderConfig.Color or Color3.fromRGB(9, 149, 98)
				SliderConfig.Flag = SliderConfig.Flag or nil
				SliderConfig.Save = SliderConfig.Save or false
				SliderConfig.Block = SliderConfig.Block or false
			
				local Slider = {Value = SliderConfig.Default, Save = SliderConfig.Save}
				local Dragging = false
				local lastBlockState = nil
			
				local isInfiniteSlider = (SliderConfig.Max == math.huge)
				local effectiveMax = isInfiniteSlider and 1e12 or SliderConfig.Max -- suporta nÃºmeros maiores
				local infiniteThreshold = 0.95
			
				local function formatValue(value)
					if value == math.huge then
						return "â"
					elseif value >= 1e6 then
						return string.format("%.1fM", value / 1e6)
					elseif value >= 1e3 then
						return string.format("%.1fK", value / 1e3)
					else
						return tostring(math.floor(value * 100) / 100)
					end
				end
			
				local sliderColor = SliderConfig.Color
				if typeof(sliderColor) ~= "Color3" then
					sliderColor = Color3.fromRGB(9, 149, 98)
				end
			
				local SliderDrag = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", sliderColor, 0, 5), {
					Size = UDim2.new(0, 0, 1, 0),
					BackgroundTransparency = 0.3,
					ClipsDescendants = true
				}), {
					AddThemeObject(SetProps(MakeElement("Label", "value", 13), {
						Size = UDim2.new(1, -12, 0, 14),
						Position = UDim2.new(0, 12, 0, 6),
						Font = Enum.Font.GothamBold,
						Name = "Value",
						TextTransparency = 0
					}), "Text")
				}), "Accent")
			
				local SliderBar = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", sliderColor, 0, 5), {
					Size = UDim2.new(1, -24, 0, 26),
					Position = UDim2.new(0, 12, 0, 30),
					BackgroundTransparency = 0.9
				}), {
					AddThemeObject(SetProps(MakeElement("Stroke"), {
						Color = sliderColor,
						Thickness = isInfiniteSlider and 1.5 or 1
					}), "Stroke"),
					AddThemeObject(SetProps(MakeElement("Label", "value", 13), {
						Size = UDim2.new(1, -12, 0, 14),
						Position = UDim2.new(0, 12, 0, 6),
						Font = Enum.Font.GothamBold,
						Name = "Value",
						TextTransparency = 0.8
					}), "TextDark"),
					SliderDrag
				}), "Second")
			
				local SliderFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
					Size = UDim2.new(1, 0, 0, 65),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", SliderConfig.Name, 15), {
						Size = UDim2.new(1, -12, 0, 14),
						Position = UDim2.new(0, 12, 0, 10),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					SliderBar
				}), "Second")
			
				RegisterElement(ItemParent.Name, SliderConfig.Name, SliderFrame)
			
				local function applyBlockState(isBlocked)
					if isBlocked then
						SliderBar.Active = false
						TweenService:Create(SliderBar, TweenInfo.new(0.3), {BackgroundTransparency = 0.95}):Play()
						TweenService:Create(SliderDrag, TweenInfo.new(0.3), {BackgroundTransparency = 0.7}):Play()
					else
						SliderBar.Active = true
						TweenService:Create(SliderBar, TweenInfo.new(0.3), {BackgroundTransparency = 0.9}):Play()
						TweenService:Create(SliderDrag, TweenInfo.new(0.3), {BackgroundTransparency = 0.3}):Play()
					end
				end
			
				task.spawn(function()
					while SliderFrame and SliderFrame.Parent do
						local currentBlockState
						if type(SliderConfig.Block) == "function" then
							currentBlockState = SliderConfig.Block()
						else
							currentBlockState = SliderConfig.Block
						end
						if lastBlockState ~= currentBlockState then
							lastBlockState = currentBlockState
							applyBlockState(currentBlockState)
						end
						task.wait(0.1)
					end
				end)
			
				SliderBar.InputBegan:Connect(function(Input)
					if Input.UserInputType == Enum.UserInputType.MouseButton1 and not lastBlockState then
						Dragging = true
						TweenService:Create(SliderBar, TweenInfo.new(0.15), {BackgroundTransparency = 0.7}):Play()
					end
				end)
			
				SliderBar.InputEnded:Connect(function(Input)
					if Input.UserInputType == Enum.UserInputType.MouseButton1 then
						Dragging = false
						TweenService:Create(SliderBar, TweenInfo.new(0.25), {BackgroundTransparency = 0.9}):Play()
					end
				end)
			
				UserInputService.InputChanged:Connect(function(Input)
					if Dragging and Input.UserInputType == Enum.UserInputType.MouseMovement and not lastBlockState then
						local SizeScale = math.clamp((Input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
						if isInfiniteSlider then
							if isInfiniteSlider then
								if SizeScale >= infiniteThreshold then
									Slider:Set(math.huge)
								else
									local softMax = math.max(SliderConfig.Min * 5, SliderConfig.Default * 50) -- vocÃª pode ajustar o multiplicador
									local scaledValue = SliderConfig.Min + (softMax - SliderConfig.Min) * (SizeScale / infiniteThreshold)
									local steppedValue = math.floor(scaledValue / SliderConfig.Increment + 0.5) * SliderConfig.Increment
									Slider:Set(steppedValue)
								end
							end
							
						else
							local scaledValue = SliderConfig.Min + ((SliderConfig.Max - SliderConfig.Min) * SizeScale)
							local steppedValue = math.floor(scaledValue / SliderConfig.Increment + 0.5) * SliderConfig.Increment
							Slider:Set(steppedValue)
						end
						SaveCfg(game.GameId)
					end
				end)
			
				function Slider:Set(Value)
					if isInfiniteSlider and Value == math.huge then
						self.Value = math.huge
						TweenService:Create(SliderDrag, TweenInfo.new(.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
							Size = UDim2.fromScale(1, 1)
						}):Play()
					else
						local maxForCalculation = isInfiniteSlider and effectiveMax or SliderConfig.Max
						self.Value = math.clamp(Round(Value, SliderConfig.Increment), SliderConfig.Min, maxForCalculation)
						local scaleForTween = (self.Value - SliderConfig.Min) / (maxForCalculation - SliderConfig.Min)
						TweenService:Create(SliderDrag, TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
							Size = UDim2.fromScale(scaleForTween, 1)
						}):Play()
					end
					local valueText = formatValue(self.Value) .. " " .. SliderConfig.ValueName
					SliderBar.Value.Text = valueText
					SliderDrag.Value.Text = valueText
					SliderConfig.Callback(self.Value)
				end
			
				function Slider:UpdateColor(newColor)
					if typeof(newColor) == "Color3" then
						SliderConfig.Color = newColor
						SliderDrag.BackgroundColor3 = newColor
						SliderBar.BackgroundColor3 = newColor
						SliderBar.UIStroke.Color = newColor
					end
				end
			
				Slider:Set(Slider.Value)
				if SliderConfig.Flag then
					OrionLib.Flags[SliderConfig.Flag] = Slider
				end
				return Slider
			end
			

			function ElementFunction:AddDropdown(DropdownConfig)
				DropdownConfig = DropdownConfig or {}
				DropdownConfig.Name = DropdownConfig.Name or "Dropdown"
				DropdownConfig.Options = DropdownConfig.Options or {}
				DropdownConfig.Default = DropdownConfig.Default or ""
				DropdownConfig.Multi = DropdownConfig.Multi or false
				DropdownConfig.Searchable = DropdownConfig.Searchable or false
				DropdownConfig.Grouped = DropdownConfig.Grouped or false
				DropdownConfig.Icons = DropdownConfig.Icons or false
				DropdownConfig.MaxHeight = DropdownConfig.MaxHeight or 200
				DropdownConfig.Callback = DropdownConfig.Callback or function() end
				DropdownConfig.Flag = DropdownConfig.Flag or nil
				DropdownConfig.Save = DropdownConfig.Save or false
			
				local Dropdown = {
					Value = DropdownConfig.Multi and {} or DropdownConfig.Default,
					Options = DropdownConfig.Options,
					FilteredOptions = {},
					Buttons = {},
					Groups = {},
					Toggled = false,
					SearchText = "",
					Type = "Dropdown",
					Save = DropdownConfig.Save,
					IsPlayerDropdown = false
				}
				
				local function DetectPlayerDropdown()
					for _, option in pairs(DropdownConfig.Options) do
						local optionText = type(option) == "table" and (option.text or option.name) or tostring(option)
						local playerName = optionText:match("^(.-) %(") or optionText
						
						if Vglobais and Vglobais.ps and Vglobais.ps:FindFirstChild(playerName) then
							return true
						end
					end
					return false
				end
			
				Dropdown.IsPlayerDropdown = DetectPlayerDropdown()
			
				local MaxElements = 5
				local DropdownList = MakeElement("List")
				local SearchBox, SearchContainer
			
				if DropdownConfig.Searchable then
					SearchBox = SetProps(MakeElement("TextBox"), {
						Size = UDim2.new(1, -16, 1, -6),
						Position = UDim2.new(0, 8, 0, 3),
						BackgroundTransparency = 1,
						TextColor3 = Color3.fromRGB(255, 255, 255),
						PlaceholderColor3 = Color3.fromRGB(140, 140, 140),
						PlaceholderText = "Search...",
						Font = Enum.Font.Gotham,
						TextSize = 13,
						Text = "",
						TextXAlignment = Enum.TextXAlignment.Center
					})
			
					SearchContainer = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255,255,255),0,6), {
						Size = UDim2.new(1,-16,0,26),
						Position = UDim2.new(0,8,0,43),
						Visible = false,
						Name = "SearchContainer"
					}), {MakeElement("Stroke"), SearchBox}), "Main")
				end
			
				local DropdownContainer = AddThemeObject(SetProps(SetChildren(MakeElement("ScrollFrame", Color3.fromRGB(40,40,40),4), {DropdownList}), {
					Parent = ItemParent,
					Position = UDim2.new(0,0,0,DropdownConfig.Searchable and 72 or 38),
					Size = UDim2.new(1,0,1,DropdownConfig.Searchable and -72 or -38),
					ClipsDescendants = true,
					Visible = false
				}), "Divider")
			
				local Click = SetProps(MakeElement("Button"), {Size = UDim2.new(1,0,1,0)})
			
				local DropdownFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255,255,255),0,5), {
					Size = UDim2.new(1,0,0,38),
					Parent = ItemParent,
					ClipsDescendants = true
				}), {
					DropdownConfig.Searchable and SearchContainer or MakeElement("TFrame"),
					DropdownContainer,
					SetProps(SetChildren(MakeElement("TFrame"), {
						AddThemeObject(SetProps(MakeElement("Label", DropdownConfig.Name,15), {
							Size = UDim2.new(1,-12,1,0),
							Position = UDim2.new(0,12,0,0),
							Font = Enum.Font.GothamBold,
							Name = "Content"
						}), "Text"),
						AddThemeObject(SetProps(MakeElement("Image","rbxassetid://7072706796"), {
							Size = UDim2.new(0,20,0,20),
							AnchorPoint = Vector2.new(0,0.5),
							Position = UDim2.new(1,-30,0.5,0),
							ImageColor3 = Color3.fromRGB(240,240,240),
							Name = "Arrow"
						}), "TextDark"),
						AddThemeObject(SetProps(MakeElement("Label","Select option",13), {
							Size = UDim2.new(1,-40,1,0),
							Position = UDim2.new(0,0,0,0),
							Font = Enum.Font.Gotham,
							Name = "Selected",
							TextXAlignment = Enum.TextXAlignment.Right
						}), "TextDark"),
						AddThemeObject(SetProps(MakeElement("Frame"), {Size = UDim2.new(1,0,0,1), Position = UDim2.new(0,0,1,-1), Name = "Line", Visible = false}), "Stroke"),
						Click
					}), {Size = UDim2.new(1,0,0,38), ClipsDescendants = true, Name = "Header"}),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					MakeElement("Corner")
				}), "Second")
				
				RegisterElement(ItemParent.Name, DropdownConfig.Name, DropdownFrame)
				AddConnection(DropdownList:GetPropertyChangedSignal("AbsoluteContentSize"), function()
					DropdownContainer.CanvasSize = UDim2.new(0,0,0,DropdownList.AbsoluteContentSize.Y)
				end)
			
				local function CreateOption(optionData, group)
					local optionText, optionIcon, optionValue, displayName, username
					
					if type(optionData) == "table" then
						optionText = optionData.text or optionData.name or tostring(optionData.value)
						optionIcon = optionData.icon
						optionValue = optionData.value or optionText
					else
						optionText = tostring(optionData)
						optionValue = optionData
					end
			
					if Dropdown.IsPlayerDropdown then
						local name, displayNameExtracted = optionText:match("^(.-)%s%((.-)%)$")
						username = name or optionText
						displayName = displayNameExtracted or optionText
					end
			
					local optionHeight = Dropdown.IsPlayerDropdown and 60 or 28
					local OptionBtn
			
					if Dropdown.IsPlayerDropdown then
						OptionBtn = AddThemeObject(SetProps(SetChildren(MakeElement("Button", Color3.fromRGB(40, 40, 40)), {
							MakeElement("Corner", 0, 6),
							AddThemeObject(SetProps(MakeElement("Label", displayName, 13, 0), {
								Name = "DisplayName",
								Position = UDim2.new(0, 60, 0, 8),
								Size = UDim2.new(1, -70, 0, 16),
								Font = Enum.Font.GothamBold,
								TextXAlignment = Enum.TextXAlignment.Left,
								TextColor3 = Color3.fromRGB(255, 255, 255),
								BackgroundTransparency = 1
							}), "Text"),
							AddThemeObject(SetProps(MakeElement("Label", username, 12, 0.3), {
								Name = "Username",
								Position = UDim2.new(0, 60, 0, 26),
								Size = UDim2.new(1, -70, 0, 14),
								Font = Enum.Font.Gotham,
								TextXAlignment = Enum.TextXAlignment.Left,
								TextColor3 = Color3.fromRGB(200, 200, 200),
								BackgroundTransparency = 1
							}), "Text"),
							AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 10), {
								Size = UDim2.new(0, 50, 0, 50),
								Position = UDim2.new(0, 5, 0, 5)
							}), {
								SetProps(MakeElement("Image", "https://www.roblox.com/headshot-thumbnail/image?userId=" .. (Vglobais.ps:FindFirstChild(username) and Vglobais.ps[username].UserId or 1) .. "&width=420&height=420&format=png"), {
									Size = UDim2.new(1, 0, 1, 0),
									BackgroundTransparency = 1
								}),
								MakeElement("Corner", 1)
							}), "Divider")
						}), {
							Parent = group or DropdownContainer,
							Size = UDim2.new(1, 0, 0, optionHeight),
							BackgroundTransparency = 1,
							ClipsDescendants = true
						}), "Divider")
					else
						OptionBtn = AddThemeObject(SetProps(SetChildren(MakeElement("Button", Color3.fromRGB(40,40,40)), {
							MakeElement("Corner",0,6),
							optionIcon and SetProps(MakeElement("Image",optionIcon), {Size=UDim2.new(0,16,0,16),Position=UDim2.new(0,8,0.5,0),AnchorPoint=Vector2.new(0,0.5),Name="Icon"}) or MakeElement("TFrame"),
							AddThemeObject(SetProps(MakeElement("Label", optionText, 13,0.4), {Position=UDim2.new(0,optionIcon and 32 or 8,0,0), Size=UDim2.new(1, optionIcon and -40 or -16, 1,0), Name="Title", TextXAlignment=Enum.TextXAlignment.Left}), "Text"),
							DropdownConfig.Multi and AddThemeObject(SetProps(MakeElement("RoundFrame",Color3.fromRGB(60,60,60),0,2), {Size=UDim2.new(0,16,0,16),Position=UDim2.new(1,-24,0.5,0),AnchorPoint = Vector2.new(0,0.5), Name="Checkbox"}), "Stroke") or MakeElement("TFrame")
						}), {Parent=group or DropdownContainer, Size=UDim2.new(1,0,0,optionHeight), BackgroundTransparency=1, ClipsDescendants=true}), "Divider")
					end
			
					AddConnection(OptionBtn.MouseButton1Click, function()
						if DropdownConfig.Multi then
							local index = table.find(Dropdown.Value, optionValue)
							if index then 
								table.remove(Dropdown.Value,index) 
							else 
								table.insert(Dropdown.Value,optionValue) 
							end
						else
							Dropdown:Set(optionValue)
							Dropdown.Toggled=false
							Dropdown:UpdateVisibility()
						end
						Dropdown:UpdateSelection()
						SaveCfg(game.GameId)
					end)
			
					AddConnection(OptionBtn.MouseEnter, function() 
						TweenService:Create(OptionBtn, TweenInfo.new(0.15), {BackgroundTransparency=0.8}):Play() 
					end)
					
					AddConnection(OptionBtn.MouseLeave, function() 
						local selected=DropdownConfig.Multi and table.find(Dropdown.Value, optionValue) or (Dropdown.Value==optionValue) 
						TweenService:Create(OptionBtn, TweenInfo.new(0.15), {BackgroundTransparency=selected and 0.2 or 1}):Play() 
					end)
			
					Dropdown.Buttons[optionValue]=OptionBtn
					return OptionBtn
				end
			
				local function CreateGroup(groupName, options)
					local GroupFrame = SetChildren(SetProps(MakeElement("TFrame"), {
						Size = UDim2.new(1, 0, 0, 0),
						Parent = DropdownContainer,
						Name = " " .. groupName,
						AutomaticSize = Enum.AutomaticSize.Y
					}), {
						MakeElement("List", 0, 2),
						AddThemeObject(SetProps(MakeElement("Label"," " .. groupName, 12), {
							Size = UDim2.new(1, -16, 0, 20),
							Position = UDim2.new(0, 8, 0, 0),
							Font = Enum.Font.GothamBold,
							Name = "GroupHeader",
							TextXAlignment = Enum.TextXAlignment.Left
						}), "TextDark")
					})
			
					Dropdown.Groups[groupName] = GroupFrame
			
					for _, option in pairs(options) do
						CreateOption(option, GroupFrame)
					end
			
					return GroupFrame
				end
			
				local function FilterOptions()
					if not DropdownConfig.Searchable or Dropdown.SearchText=="" then
						for _,btn in pairs(Dropdown.Buttons) do btn.Visible=true end
						for _,group in pairs(Dropdown.Groups) do group.Visible=true end
						return
					end
					local searchLower=string.lower(Dropdown.SearchText)
					for value,btn in pairs(Dropdown.Buttons) do
						local searchText = ""
						if Dropdown.IsPlayerDropdown then
							if btn:FindFirstChild("DisplayName") then searchText = searchText .. string.lower(btn.DisplayName.Text) .. " " end
							if btn:FindFirstChild("Username") then searchText = searchText .. string.lower(btn.Username.Text) end
						else
							if btn:FindFirstChild("Title") then searchText = string.lower(btn.Title.Text) end
						end
						btn.Visible=string.find(searchText,searchLower)~=nil
					end
					for _,group in pairs(Dropdown.Groups) do
						local hasVisible=false
						for _,child in pairs(group:GetChildren()) do if child:IsA("TextButton") and child.Visible then hasVisible=true break end end
						group.Visible=hasVisible
					end
				end
			
				function Dropdown:UpdateSelection()
					local selectedText=""
					if DropdownConfig.Multi then
						if type(self.Value)=="table" and #self.Value>0 then
							local validValues={}
							for _,v in pairs(self.Value) do if type(v)=="string" or type(v)=="number" then table.insert(validValues,tostring(v)) end end
							selectedText=table.concat(validValues,", ")
						else selectedText="Select options" end
					else selectedText=tostring(self.Value~="" and self.Value or "Select option")
					end
					DropdownFrame.Header.Selected.Text=selectedText
					
					for value,btn in pairs(self.Buttons) do
						local selected=DropdownConfig.Multi and table.find(self.Value,value) or (self.Value==value)
						local tweenInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
						
						TweenService:Create(btn,tweenInfo,{BackgroundTransparency=selected and 0.2 or 1}):Play()
						
						if self.IsPlayerDropdown then
							if btn:FindFirstChild("DisplayName") then TweenService:Create(btn.DisplayName,tweenInfo,{TextTransparency=selected and 0 or 0.4}):Play() end
							if btn:FindFirstChild("Username") then TweenService:Create(btn.Username,tweenInfo,{TextTransparency=selected and 0 or 0.4}):Play() end
						else
							if btn:FindFirstChild("Title") then TweenService:Create(btn.Title,tweenInfo,{TextTransparency=selected and 0 or 0.4}):Play() end
						end
						
						if DropdownConfig.Multi and btn:FindFirstChild("Checkbox") then
							local checkColor=selected and Color3.fromRGB(0,162,255) or Color3.fromRGB(60,60,60)
							TweenService:Create(btn.Checkbox,tweenInfo,{BackgroundColor3=checkColor}):Play()
						end
					end
					DropdownConfig.Callback(self.Value)
				end
			
				function Dropdown:UpdateVisibility()
					local searchHeight=DropdownConfig.Searchable and 34 or 0
					DropdownContainer.Visible=self.Toggled
					DropdownFrame.Header.Line.Visible=self.Toggled
					if DropdownConfig.Searchable and SearchContainer then SearchContainer.Visible=self.Toggled end
					TweenService:Create(DropdownFrame.Header.Arrow,TweenInfo.new(0.15),{Rotation=self.Toggled and 180 or 0}):Play()
			
					local contentHeight=0
					if self.Toggled then
						local totalButtons=0
						for _,btn in pairs(self.Buttons) do if btn.Visible then totalButtons=totalButtons+1 end end
						local buttonHeight = self.IsPlayerDropdown and 60 or 28
						contentHeight=math.min(totalButtons, MaxElements)*buttonHeight + searchHeight
					end
			
					local totalHeight = self.Toggled and (38 + contentHeight) or 38
					TweenService:Create(DropdownFrame,TweenInfo.new(0.15),{Size=UDim2.new(1,0,0,totalHeight)}):Play()
			
					if DropdownConfig.Searchable and SearchBox then
						if self.Toggled then 
							spawn(function() 
								wait(0.1) 
								SearchBox:CaptureFocus() 
							end)
						else 
							SearchBox.Text=""
							self.SearchText=""
							FilterOptions() 
						end
					end
				end
				
				function Dropdown:Set(Value, skipCallback)
					if DropdownConfig.Multi then 
						self.Value=Value or {} 
					else 
						self.Value=Value or "" 
					end
					if not skipCallback then
						self:UpdateSelection()
					end
				end
			
				function Dropdown:Refresh(Options,Delete)
					if Delete then
						for _,v in pairs(self.Buttons) do v:Destroy() end
						for _,v in pairs(self.Groups) do v:Destroy() end
						table.clear(self.Options); table.clear(self.Buttons); table.clear(self.Groups)
					end
					self.Options=Options
					DropdownConfig.Options = Options
					self.IsPlayerDropdown = DetectPlayerDropdown()
					
					if DropdownConfig.Grouped then
						for groupName,groupOptions in pairs(Options) do CreateGroup(groupName,groupOptions) end
					else
						for _,option in pairs(Options) do CreateOption(option) end
					end
					self:UpdateSelection()
				end
			
				AddConnection(Click.MouseButton1Click,function()
					Dropdown.Toggled=not Dropdown.Toggled
					Dropdown:UpdateVisibility()
				end)
			
				if DropdownConfig.Searchable and SearchBox then
					AddConnection(SearchBox:GetPropertyChangedSignal("Text"),function()
						Dropdown.SearchText=SearchBox.Text
						FilterOptions()
					end)
					
					AddConnection(SearchBox.Focused,function()
						TweenService:Create(SearchBox,TweenInfo.new(0.2),{TextXAlignment=Enum.TextXAlignment.Left}):Play()
					end)
					
					AddConnection(SearchBox.FocusLost,function()
						if SearchBox.Text == "" then
							TweenService:Create(SearchBox,TweenInfo.new(0.2),{TextXAlignment=Enum.TextXAlignment.Center}):Play()
						end
						if not Dropdown.Toggled then 
							SearchBox.Text=""
							Dropdown.SearchText=""
							FilterOptions() 
						end
					end)
				end
			
				AddConnection(UserInputService.InputBegan,function(input,gameProcessed)
					if gameProcessed or not Dropdown.Toggled then return end
					if input.KeyCode==Enum.KeyCode.Escape then Dropdown.Toggled=false; Dropdown:UpdateVisibility() end
				end)
			
				Dropdown:Refresh(Dropdown.Options,false)
				Dropdown:Set(Dropdown.Value)
				if DropdownConfig.Flag then OrionLib.Flags[DropdownConfig.Flag]=Dropdown end
				return Dropdown
			end
			
			function ElementFunction:AddThemeDropdown()
				local Themes = {"Default"} 
				for Name, _ in pairs(OrionLib.Themes) do
					if Name ~= "Default" then 
						table.insert(Themes, Name)
					end
				end
			
				return self:AddDropdown({
					Name = "Themes",
					Options = Themes,
					Default = OrionLib.SelectedTheme,
					Callback = function(Value)
						OrionLib.SelectedTheme = Value
						OrionLib:SetTheme()
					end
				})
			end

			function ElementFunction:AddMouseModeDropdown()
				return self:AddDropdown({
					Name = "Unlock Mouse Mode",
					Options = {"TB", "N"},
					Default = OrionLib.UnlockMouseMode,
					Callback = function(Value)
						OrionLib.UnlockMouseMode = Value
					end
				})
			end

			function ElementFunction:AddBind(BindConfig)
				BindConfig.Name = BindConfig.Name or "Bind"
				BindConfig.Default = BindConfig.Default or Enum.KeyCode.Unknown
				BindConfig.Hold = BindConfig.Hold or false
				BindConfig.Callback = BindConfig.Callback or function() end
				BindConfig.Flag = BindConfig.Flag or nil
				BindConfig.Save = BindConfig.Save or false

				local Bind = {Value, Binding = false, Type = "Bind", Save = BindConfig.Save}
				local Holding = false

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				local BindBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
					Size = UDim2.new(0, 24, 0, 24),
					Position = UDim2.new(1, -12, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5)
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					AddThemeObject(SetProps(MakeElement("Label", BindConfig.Name, 14), {
						Size = UDim2.new(1, 0, 1, 0),
						Font = Enum.Font.GothamBold,
						TextXAlignment = Enum.TextXAlignment.Center,
						Name = "Value"
					}), "Text")
				}), "Main")

				local BindFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", BindConfig.Name, 15), {
						Size = UDim2.new(1, -12, 1, 0),
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					BindBox,
					Click
				}), "Second")
				RegisterElement(ItemParent.Name, BindConfig.Name, BindFrame)
				AddConnection(BindBox.Value:GetPropertyChangedSignal("Text"), function()
					TweenService:Create(BindBox, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, BindBox.Value.TextBounds.X + 16, 0, 24)}):Play()
				end)

				AddConnection(Click.InputEnded, function(Input)
					if Input.UserInputType == Enum.UserInputType.MouseButton1 then
						if Bind.Binding then return end
						Bind.Binding = true
						BindBox.Value.Text = ""
					end
				end)

				AddConnection(UserInputService.InputBegan, function(Input)
					if UserInputService:GetFocusedTextBox() then return end
					if (Input.KeyCode.Name == Bind.Value or Input.UserInputType.Name == Bind.Value) and not Bind.Binding then
						if BindConfig.Hold then
							Holding = true
							BindConfig.Callback(Holding)
						else
							BindConfig.Callback(Input)
						end
					elseif Bind.Binding then
						local Key
						pcall(function()
							if not CheckKey(BlacklistedKeys, Input.KeyCode) then
								Key = Input.KeyCode
							end
						end)
						pcall(function()
							if CheckKey(WhitelistedMouse, Input.UserInputType) and not Key then
								Key = Input.UserInputType
							end
						end)
						Key = Key or Bind.Value
						Bind:Set(Key)
						SaveCfg(game.GameId)
					end
				end)

				AddConnection(UserInputService.InputEnded, function(Input)
					if Input.KeyCode.Name == Bind.Value or Input.UserInputType.Name == Bind.Value then
						if BindConfig.Hold and Holding then
							Holding = false
							BindConfig.Callback(Holding)
						end
					end
				end)

				AddConnection(Click.MouseEnter, function()
					TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
				end)

				AddConnection(Click.MouseLeave, function()
					TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play()
				end)

				AddConnection(Click.MouseButton1Up, function()
					TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
				end)

				AddConnection(Click.MouseButton1Down, function()
					TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 6)}):Play()
				end)

				function Bind:Set(Key)
					Bind.Binding = false
					Bind.Value = Key or Bind.Value
					Bind.Value = Bind.Value.Name or Bind.Value
					BindBox.Value.Text = Bind.Value
				end

				Bind:Set(BindConfig.Default)
				if BindConfig.Flag then				
					OrionLib.Flags[BindConfig.Flag] = Bind
				end
				return Bind
			end  
			function ElementFunction:AddTextbox(TextboxConfig)
				TextboxConfig = TextboxConfig or {}
				TextboxConfig.Name = TextboxConfig.Name or "Textbox"
				TextboxConfig.Default = TextboxConfig.Default or ""
				TextboxConfig.TextDisappear = TextboxConfig.TextDisappear or false
				TextboxConfig.Callback = TextboxConfig.Callback or function() end

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				local TextboxActual = AddThemeObject(Create("TextBox", {
					Size = UDim2.new(1, 0, 1, 0),
					BackgroundTransparency = 1,
					TextColor3 = Color3.fromRGB(255, 255, 255),
					PlaceholderColor3 = Color3.fromRGB(210,210,210),
					PlaceholderText = "Input",
					Font = Enum.Font.GothamSemibold,
					TextXAlignment = Enum.TextXAlignment.Center,
					TextSize = 14,
					ClearTextOnFocus = false
				}), "Text")

				local TextContainer = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
					Size = UDim2.new(0, 24, 0, 24),
					Position = UDim2.new(1, -12, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5)
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					TextboxActual
				}), "Main")


				local TextboxFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", TextboxConfig.Name, 15), {
						Size = UDim2.new(1, -12, 1, 0),
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					TextContainer,
					Click
				}), "Second")
				RegisterElement(ItemParent.Name, TextboxConfig.Name, TextboxFrame)
				AddConnection(TextboxActual:GetPropertyChangedSignal("Text"), function()
					--TextContainer.Size = UDim2.new(0, TextboxActual.TextBounds.X + 16, 0, 24)
					TweenService:Create(TextContainer, TweenInfo.new(0.45, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, TextboxActual.TextBounds.X + 16, 0, 24)}):Play()
				end)

				AddConnection(TextboxActual.FocusLost, function()
					TextboxConfig.Callback(TextboxActual.Text)
					if TextboxConfig.TextDisappear then
						TextboxActual.Text = ""
					end	
				end)

				TextboxActual.Text = TextboxConfig.Default

				AddConnection(Click.MouseEnter, function()
					TweenService:Create(TextboxFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
				end)

				AddConnection(Click.MouseLeave, function()
					TweenService:Create(TextboxFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play()
				end)

				AddConnection(Click.MouseButton1Up, function()
					TweenService:Create(TextboxFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
					TextboxActual:CaptureFocus()
				end)

				AddConnection(Click.MouseButton1Down, function()
					TweenService:Create(TextboxFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 6)}):Play()
				end)
			end 
			function ElementFunction:AddColorpicker(ColorpickerConfig)
				ColorpickerConfig = ColorpickerConfig or {}
				ColorpickerConfig.Name = ColorpickerConfig.Name or "Colorpicker"
				ColorpickerConfig.Default = ColorpickerConfig.Default or Color3.fromRGB(255,255,255)
				ColorpickerConfig.Callback = ColorpickerConfig.Callback or function() end
				ColorpickerConfig.Flag = ColorpickerConfig.Flag or nil
				ColorpickerConfig.Save = ColorpickerConfig.Save or false

				local ColorH, ColorS, ColorV = 1, 1, 1
				local Colorpicker = {Value = ColorpickerConfig.Default, Toggled = false, Type = "Colorpicker", Save = ColorpickerConfig.Save}

				local ColorSelection = Create("ImageLabel", {
					Size = UDim2.new(0, 18, 0, 18),
					Position = UDim2.new(select(3, Color3.toHSV(Colorpicker.Value))),
					ScaleType = Enum.ScaleType.Fit,
					AnchorPoint = Vector2.new(0.5, 0.5),
					BackgroundTransparency = 1,
					Image = "http://www.roblox.com/asset/?id=4805639000"
				})

				local HueSelection = Create("ImageLabel", {
					Size = UDim2.new(0, 18, 0, 18),
					Position = UDim2.new(0.5, 0, 1 - select(1, Color3.toHSV(Colorpicker.Value))),
					ScaleType = Enum.ScaleType.Fit,
					AnchorPoint = Vector2.new(0.5, 0.5),
					BackgroundTransparency = 1,
					Image = "http://www.roblox.com/asset/?id=4805639000"
				})

				local Color = Create("ImageLabel", {
					Size = UDim2.new(1, -25, 1, 0),
					Visible = false,
					Image = "rbxassetid://4155801252"
				}, {
					Create("UICorner", {CornerRadius = UDim.new(0, 5)}),
					ColorSelection
				})

				local Hue = Create("Frame", {
					Size = UDim2.new(0, 20, 1, 0),
					Position = UDim2.new(1, -20, 0, 0),
					Visible = false
				}, {
					Create("UIGradient", {Rotation = 270, Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 4)), ColorSequenceKeypoint.new(0.20, Color3.fromRGB(234, 255, 0)), ColorSequenceKeypoint.new(0.40, Color3.fromRGB(21, 255, 0)), ColorSequenceKeypoint.new(0.60, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.80, Color3.fromRGB(0, 17, 255)), ColorSequenceKeypoint.new(0.90, Color3.fromRGB(255, 0, 251)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))},}),
					Create("UICorner", {CornerRadius = UDim.new(0, 5)}),
					HueSelection
				})

				local ColorpickerContainer = Create("Frame", {
					Position = UDim2.new(0, 0, 0, 32),
					Size = UDim2.new(1, 0, 1, -32),
					BackgroundTransparency = 1,
					ClipsDescendants = true
				}, {
					Hue,
					Color,
					Create("UIPadding", {
						PaddingLeft = UDim.new(0, 35),
						PaddingRight = UDim.new(0, 35),
						PaddingBottom = UDim.new(0, 10),
						PaddingTop = UDim.new(0, 17)
					})
				})

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				local ColorpickerBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
					Size = UDim2.new(0, 24, 0, 24),
					Position = UDim2.new(1, -12, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5)
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Main")

				local ColorpickerFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					SetProps(SetChildren(MakeElement("TFrame"), {
						AddThemeObject(SetProps(MakeElement("Label", ColorpickerConfig.Name, 15), {
							Size = UDim2.new(1, -12, 1, 0),
							Position = UDim2.new(0, 12, 0, 0),
							Font = Enum.Font.GothamBold,
							Name = "Content"
						}), "Text"),
						ColorpickerBox,
						Click,
						AddThemeObject(SetProps(MakeElement("Frame"), {
							Size = UDim2.new(1, 0, 0, 1),
							Position = UDim2.new(0, 0, 1, -1),
							Name = "Line",
							Visible = false
						}), "Stroke"), 
					}), {
						Size = UDim2.new(1, 0, 0, 38),
						ClipsDescendants = true,
						Name = "F"
					}),
					ColorpickerContainer,
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
				}), "Second")
				RegisterElement(ItemParent.Name, ColorpickerConfig.Name, ColorpickerFrame)
				AddConnection(Click.MouseButton1Click, function()
					Colorpicker.Toggled = not Colorpicker.Toggled
					TweenService:Create(ColorpickerFrame,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{Size = Colorpicker.Toggled and UDim2.new(1, 0, 0, 148) or UDim2.new(1, 0, 0, 38)}):Play()
					Color.Visible = Colorpicker.Toggled
					Hue.Visible = Colorpicker.Toggled
					ColorpickerFrame.F.Line.Visible = Colorpicker.Toggled
				end)

				local function UpdateColorPicker()
					ColorpickerBox.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
					Color.BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1)
					Colorpicker:Set(ColorpickerBox.BackgroundColor3)
					ColorpickerConfig.Callback(ColorpickerBox.BackgroundColor3)
					SaveCfg(game.GameId)
				end

				ColorH = 1 - (math.clamp(HueSelection.AbsolutePosition.Y - Hue.AbsolutePosition.Y, 0, Hue.AbsoluteSize.Y) / Hue.AbsoluteSize.Y)
				ColorS = (math.clamp(ColorSelection.AbsolutePosition.X - Color.AbsolutePosition.X, 0, Color.AbsoluteSize.X) / Color.AbsoluteSize.X)
				ColorV = 1 - (math.clamp(ColorSelection.AbsolutePosition.Y - Color.AbsolutePosition.Y, 0, Color.AbsoluteSize.Y) / Color.AbsoluteSize.Y)

				AddConnection(Color.InputBegan, function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						if ColorInput then
							ColorInput:Disconnect()
						end
						ColorInput = AddConnection(RunService.RenderStepped, function()
							local ColorX = (math.clamp(Mouse.X - Color.AbsolutePosition.X, 0, Color.AbsoluteSize.X) / Color.AbsoluteSize.X)
							local ColorY = (math.clamp(Mouse.Y - Color.AbsolutePosition.Y, 0, Color.AbsoluteSize.Y) / Color.AbsoluteSize.Y)
							ColorSelection.Position = UDim2.new(ColorX, 0, ColorY, 0)
							ColorS = ColorX
							ColorV = 1 - ColorY
							UpdateColorPicker()
						end)
					end
				end)

				AddConnection(Color.InputEnded, function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						if ColorInput then
							ColorInput:Disconnect()
						end
					end
				end)

				AddConnection(Hue.InputBegan, function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						if HueInput then
							HueInput:Disconnect()
						end;

						HueInput = AddConnection(RunService.RenderStepped, function()
							local HueY = (math.clamp(Mouse.Y - Hue.AbsolutePosition.Y, 0, Hue.AbsoluteSize.Y) / Hue.AbsoluteSize.Y)

							HueSelection.Position = UDim2.new(0.5, 0, HueY, 0)
							ColorH = 1 - HueY

							UpdateColorPicker()
						end)
					end
				end)

				AddConnection(Hue.InputEnded, function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						if HueInput then
							HueInput:Disconnect()
						end
					end
				end)

				function Colorpicker:Set(Value)
					Colorpicker.Value = Value
					ColorpickerBox.BackgroundColor3 = Colorpicker.Value
					ColorpickerConfig.Callback(Colorpicker.Value)
				end

				Colorpicker:Set(Colorpicker.Value)
				if ColorpickerConfig.Flag then				
					OrionLib.Flags[ColorpickerConfig.Flag] = Colorpicker
				end
				return Colorpicker
			end  
			return ElementFunction   
		end	

		local ElementFunction = {}

		function ElementFunction:AddSection(SectionConfig)
			SectionConfig = SectionConfig or {}
			SectionConfig.Name = SectionConfig.Name or "Section"

			local SectionFrame = SetChildren(SetProps(MakeElement("TFrame"), {
				Size = UDim2.new(1, 0, 0, 26),
				Parent = Container
			}), {
				AddThemeObject(SetProps(MakeElement("Label", SectionConfig.Name, 14), {
					Size = UDim2.new(1, -12, 0, 16),
					Position = UDim2.new(0, 0, 0, 3),
					Font = Enum.Font.GothamSemibold
				}), "TextDark"),
				SetChildren(SetProps(MakeElement("TFrame"), {
					AnchorPoint = Vector2.new(0, 0),
					Size = UDim2.new(1, 0, 1, -24),
					Position = UDim2.new(0, 0, 0, 23),
					Name = "Holder"
				}), {
					MakeElement("List", 0, 6)
				}),
			})
			RegisterElement(Container.Name, SectionConfig.Name, SectionFrame)
			AddConnection(SectionFrame.Holder.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
				SectionFrame.Size = UDim2.new(1, 0, 0, SectionFrame.Holder.UIListLayout.AbsoluteContentSize.Y + 31)
				SectionFrame.Holder.Size = UDim2.new(1, 0, 0, SectionFrame.Holder.UIListLayout.AbsoluteContentSize.Y)
			end)

			local SectionFunction = {}
			for i, v in next, GetElements(SectionFrame.Holder) do
				SectionFunction[i] = v 
			end
			return SectionFunction
		end	

		for i, v in next, GetElements(Container) do
			ElementFunction[i] = v 
		end

		if TabConfig.PremiumOnly then
			for i, v in next, ElementFunction do
				ElementFunction[i] = function() end
			end    
			Container:FindFirstChild("UIListLayout"):Destroy()
			Container:FindFirstChild("UIPadding"):Destroy()
			SetChildren(SetProps(MakeElement("TFrame"), {
				Size = UDim2.new(1, 0, 1, 0),
				Parent = ItemParent
			}), {
				AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://3610239960"), {
					Size = UDim2.new(0, 18, 0, 18),
					Position = UDim2.new(0, 15, 0, 15),
					ImageTransparency = 0.4
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", "Unauthorised Access", 14), {
					Size = UDim2.new(1, -38, 0, 14),
					Position = UDim2.new(0, 38, 0, 18),
					TextTransparency = 0.4
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://4483345875"), {
					Size = UDim2.new(0, 56, 0, 56),
					Position = UDim2.new(0, 84, 0, 110),
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", "Premium Features", 14), {
					Size = UDim2.new(1, -150, 0, 14),
					Position = UDim2.new(0, 150, 0, 112),
					Font = Enum.Font.GothamBold
				}), "Text")
			})
		end
		return ElementFunction   
	end
	
	function Functions:Destroy()
		for _, Connection in next, OrionLib.Connections do
			Connection:Disconnect()
		end
		MainWindow:Destroy()
	end
	
	return Functions
end   

function OrionLib:Destroy()
	Orion:Destroy()
end

return OrionLib
