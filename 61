-- Enhanced Music Player System for Roblox
local MusicPlayer = {}

-- Configuration
local CONFIG = {
    MUSIC_FOLDER = "Musics",
    SUPPORTED_FORMATS = {".mp3", ".wav", ".ogg"},
    UPDATE_INTERVAL = 3,
    DEFAULT_VOLUME = 0.5,
    DEFAULT_SPEED = 1.0,
    DEFAULT_REVERB = 10
}

-- Settings with validation
local settings = {
    musicFolder = CONFIG.MUSIC_FOLDER,
    musicQueue = {},
    currentIndex = 1,
    isPlaying = false,
    autoplay = false,
    autoplayNext = false,
    loopEnabled = false,
    shuffleEnabled = false,
    volume = CONFIG.DEFAULT_VOLUME,
    playbackSpeed = CONFIG.DEFAULT_SPEED,
    reverbLevel = CONFIG.DEFAULT_REVERB,
    currentPlayingMusic = nil
}

-- State management
local state = {
    globalSound = nil,
    musicDropdown = nil,
    isInitialized = false,
    lastUpdateTime = 0
}

-- Utility Functions
local function validateSettings()
    settings.volume = math.clamp(settings.volume or CONFIG.DEFAULT_VOLUME, 0, 1)
    settings.playbackSpeed = math.clamp(settings.playbackSpeed or CONFIG.DEFAULT_SPEED, 0.1, 3)
    settings.reverbLevel = math.clamp(settings.reverbLevel or CONFIG.DEFAULT_REVERB, 0, 20)
end

local function createGlobalSound()
    local sound = workspace:FindFirstChild("GlobalMusicPlayer")
    if not sound then
        sound = Instance.new("Sound")
        sound.Name = "GlobalMusicPlayer"
        sound.Parent = workspace
        sound.Looped = false
        
        -- Connection for when music ends
        sound.Ended:Connect(function()
            if settings.autoplayNext then
                MusicPlayer.playNext()
            end
        end)
    end
    return sound
end

local function applyReverbEffect()
    if not state.globalSound then return end
    
    local reverb = state.globalSound:FindFirstChild("ReverbEffect")
    if not reverb then
        reverb = Instance.new("EqualizerSoundEffect")
        reverb.Name = "ReverbEffect"
        reverb.Parent = state.globalSound
    end
    
    -- Better reverb calculation
    local reverbFactor = settings.reverbLevel / 10
    reverb.HighGain = math.clamp(-20 + reverbFactor * 15, -80, 10)
    reverb.LowGain = math.clamp(5 + reverbFactor * 5, -80, 10)
    reverb.MidGain = math.clamp(-10 + reverbFactor * 10, -80, 10)
    reverb.Enabled = settings.reverbLevel > 0
end

local function checkOrCreateFolder()
    pcall(function()
        if not isfolder(settings.musicFolder) then
            makefolder(settings.musicFolder)
            print("Created music folder: " .. settings.musicFolder)
        end
    end)
end

local function isValidMusicFile(filename)
    for _, format in ipairs(CONFIG.SUPPORTED_FORMATS) do
        if filename:lower():match(format .. "$") then
            return true
        end
    end
    return false
end

local function loadMusicFiles()
    local musicFiles = {}
    local success, files = pcall(function()
        return listfiles(settings.musicFolder)
    end)
    
    if not success then
        warn("Failed to load music files from: " .. settings.musicFolder)
        return musicFiles
    end
    
    for _, filePath in ipairs(files or {}) do
        local fileName = filePath:match("([^/\\]+)$")
        if fileName and isValidMusicFile(fileName) then
            local nameWithoutExt = fileName:match("(.+)%..+$")
            if nameWithoutExt then
                table.insert(musicFiles, nameWithoutExt)
            end
        end
    end
    
    -- Update queue if empty or if new files found
    if #settings.musicQueue == 0 or #musicFiles ~= #settings.musicQueue then
        settings.musicQueue = {table.unpack(musicFiles)}
        if settings.shuffleEnabled then
            MusicPlayer.shuffleQueue()
        end
    end
    
    return musicFiles
end

-- Public Functions
function MusicPlayer.initialize(dropdown)
    state.musicDropdown = dropdown
    state.globalSound = createGlobalSound()
    checkOrCreateFolder()
    validateSettings()
    state.isInitialized = true
    
    print("Music Player initialized successfully")
    return true
end

function MusicPlayer.updateDropdown()
    if not state.musicDropdown then return end
    
    local currentTime = tick()
    if currentTime - state.lastUpdateTime < CONFIG.UPDATE_INTERVAL then
        return
    end
    
    local musicFiles = loadMusicFiles()
    state.musicDropdown:Refresh(musicFiles, true)
    state.lastUpdateTime = currentTime
    
    print("Dropdown updated with " .. #musicFiles .. " music files")
end

function MusicPlayer.playMusic(fileName)
    if not fileName or not state.globalSound then return false end
    
    -- Try different file formats
    local filePath = nil
    for _, format in ipairs(CONFIG.SUPPORTED_FORMATS) do
        local testPath = settings.musicFolder .. "/" .. fileName .. format
        if isfile(testPath) then
            filePath = testPath
            break
        end
    end
    
    if not filePath then
        warn("Music file not found: " .. fileName)
        return false
    end
    
    local success, assetId = pcall(function()
        return getcustomasset(filePath)
    end)
    
    if not success then
        warn("Failed to load music asset: " .. fileName)
        return false
    end
    
    -- Stop current music
    state.globalSound:Stop()
    
    -- Apply new settings
    state.globalSound.SoundId = assetId
    state.globalSound.Volume = settings.volume
    state.globalSound.PlaybackSpeed = settings.playbackSpeed
    applyReverbEffect()
    
    settings.currentPlayingMusic = fileName
    
    if settings.autoplay then
        state.globalSound:Play()
        settings.isPlaying = true
        print("Now playing: " .. fileName)
    else
        settings.isPlaying = false
        print("Loaded: " .. fileName)
    end
    
    return true
end

function MusicPlayer.playNext()
    if #settings.musicQueue == 0 then
        if settings.loopEnabled and settings.currentPlayingMusic then
            return MusicPlayer.playMusic(settings.currentPlayingMusic)
        end
        return false
    end
    
    local nextMusic
    if settings.shuffleEnabled then
        local randomIndex = math.random(1, #settings.musicQueue)
        nextMusic = settings.musicQueue[randomIndex]
    else
        settings.currentIndex = settings.currentIndex + 1
        if settings.currentIndex > #settings.musicQueue then
            if settings.loopEnabled then
                settings.currentIndex = 1
            else
                return false
            end
        end
        nextMusic = settings.musicQueue[settings.currentIndex]
    end
    
    if nextMusic and state.musicDropdown then
        state.musicDropdown:Set(nextMusic)
        return MusicPlayer.playMusic(nextMusic)
    end
    
    return false
end

function MusicPlayer.playPrevious()
    if #settings.musicQueue == 0 then return false end
    
    settings.currentIndex = settings.currentIndex - 1
    if settings.currentIndex < 1 then
        settings.currentIndex = settings.loopEnabled and #settings.musicQueue or 1
    end
    
    local prevMusic = settings.musicQueue[settings.currentIndex]
    if prevMusic and state.musicDropdown then
        state.musicDropdown:Set(prevMusic)
        return MusicPlayer.playMusic(prevMusic)
    end
    
    return false
end

function MusicPlayer.togglePlayPause()
    if not state.globalSound then return end
    
    if settings.isPlaying then
        state.globalSound:Pause()
        settings.isPlaying = false
        print("Music paused")
    else
        state.globalSound:Resume()
        settings.isPlaying = true
        print("Music resumed")
    end
end

function MusicPlayer.stop()
    if state.globalSound then
        state.globalSound:Stop()
        settings.isPlaying = false
        print("Music stopped")
    end
end

function MusicPlayer.shuffleQueue()
    if #settings.musicQueue <= 1 then return end
    
    for i = #settings.musicQueue, 2, -1 do
        local j = math.random(i)
        settings.musicQueue[i], settings.musicQueue[j] = settings.musicQueue[j], settings.musicQueue[i]
    end
    
    settings.currentIndex = 1
    print("Queue shuffled")
end

-- Settings Functions
function MusicPlayer.setVolume(volume)
    settings.volume = math.clamp(volume, 0, 1)
    if state.globalSound then
        state.globalSound.Volume = settings.volume
    end
end

function MusicPlayer.setPlaybackSpeed(speed)
    settings.playbackSpeed = math.clamp(speed, 0.1, 3)
    if state.globalSound then
        state.globalSound.PlaybackSpeed = settings.playbackSpeed
    end
end

function MusicPlayer.setReverbLevel(level)
    settings.reverbLevel = math.clamp(level, 0, 20)
    applyReverbEffect()
end

function MusicPlayer.getSettings()
    return {table.unpack(settings)}
end

function MusicPlayer.getCurrentMusic()
    return settings.currentPlayingMusic
end

function MusicPlayer.isPlaying()
    return settings.isPlaying
end

-- Auto-update system
task.spawn(function()
    while true do
        if state.isInitialized then
            MusicPlayer.updateDropdown()
        end
        task.wait(CONFIG.UPDATE_INTERVAL)
    end
end)

return MusicPlayer
